--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1828041
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                   D1mr               DLmr           Dw                 D1mw            DLmw           Bc                  Bcm              Bi              Bim          
--------------------------------------------------------------------------------
523,341,507 (100.0%) 1,406 (100.0%) 1,382 (100.0%) 249,749,261 (100.0%) 2,394,286 (100.0%) 3,127 (100.0%) 6,504,207 (100.0%) 45,569 (100.0%) 4,773 (100.0%) 17,118,556 (100.0%) 100,186 (100.0%) 62,698 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                  D1mr               DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          file:function
--------------------------------------------------------------------------------
215,019,716 (41.09%)  5 ( 0.36%)  5 ( 0.36%) 96,775,879 (38.75%)   384,887 (16.08%) 1,794 (57.37%) 5,420,806 (83.34%)      0              0          5,420,976 (31.67%) 30,834 (30.78%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
150,737,841 (28.80%)  4 ( 0.28%)  4 ( 0.29%) 75,338,379 (30.17%) 1,004,514 (41.95%)     0             92,056 ( 1.42%)  9,734 (21.36%)     0          5,420,976 (31.67%) 30,834 (30.78%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
150,737,841 (28.80%)  2 ( 0.14%)  2 ( 0.14%) 75,338,379 (30.17%) 1,002,171 (41.86%)     0             92,056 ( 1.42%) 30,617 (67.19%)     0          5,420,976 (31.67%) 30,834 (30.78%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
  1,952,100 ( 0.37%)  2 ( 0.14%)  2 ( 0.14%)    490,000 ( 0.20%)         5 ( 0.00%)     2 ( 0.06%)   183,750 ( 2.83%)      0              0            304,275 ( 1.78%)  3,954 ( 3.95%)      0           0           ./stdlib/./stdlib/random_r.c:random_r
  1,715,000 ( 0.33%)  2 ( 0.14%)  1 ( 0.07%)    612,500 ( 0.25%)         1 ( 0.00%)     1 ( 0.03%)   367,500 ( 5.65%)      0              0            183,750 ( 1.07%)      8 ( 0.01%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
  1,286,250 ( 0.25%)  3 ( 0.21%)  3 ( 0.22%)    490,000 ( 0.20%)         2 ( 0.00%)     1 ( 0.03%)   122,500 ( 1.88%)      0              0            245,000 ( 1.43%)      0               0           0           ./stdlib/./stdlib/random.c:random
  1,105,744 ( 0.21%)  9 ( 0.64%)  9 ( 0.65%)    491,781 ( 0.20%)        47 ( 0.00%)     0            122,870 ( 1.89%)  3,921 ( 8.60%) 3,588 (75.17%)    61,954 ( 0.36%)    380 ( 0.38%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr             DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi         Bim        

          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           #include <stdio.h>
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           #include <stdlib.h>
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           int rand_int(int N)
    306,250 ( 0.06%) 1 ( 0.07%) 0                   0                0              0            122,500 ( 1.88%)      0              0                  0               0          0          0           {
     61,250 ( 0.01%) 0          0                   0                0              0             61,250 ( 0.94%)      0              0                  0               0          0          0             int val = -1;
    490,000 ( 0.09%) 1 ( 0.07%) 1 ( 0.07%)    245,000 ( 0.10%)       0              0                  0               0              0            183,750 ( 1.07%)      8 ( 0.01%) 0          0             while( val < 0 || val >= N )
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               {
    673,750 ( 0.13%) 0          0             183,750 ( 0.07%)       1 ( 0.00%)     1 ( 0.03%)   183,750 ( 2.83%)      0              0                  0               0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
     61,250 ( 0.01%) 0          0              61,250 ( 0.02%)       0              0                  0               0              0                  0               0          0          0             return val;
    122,500 ( 0.02%) 0          0             122,500 ( 0.05%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void allocate_mem(int*** arr, int n)
         21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                0              0                 12 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i;
         24 ( 0.00%) 0          0                   6 ( 0.00%)       0              0                  6 ( 0.00%)      0              0                  0               0          0          0             *arr = (int**)malloc(n*sizeof(int*));
      2,115 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)      1,581 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                528 ( 0.00%)      7 ( 0.01%) 0          0             for(i=0; i<n; i++)
      6,300 ( 0.00%) 0          0               2,100 ( 0.00%)       0              0              1,050 ( 0.02%)     64 ( 0.14%)    63 ( 1.32%)         0               0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
         15 ( 0.00%) 0          0                   9 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void free_mem(int** arr, int n)
         18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                0              0                  9 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i;
      2,115 ( 0.00%) 0          0               1,581 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                528 ( 0.00%)      9 ( 0.01%) 0          0             for(i=0; i<n; i++)
      4,200 ( 0.00%) 0          0               1,575 ( 0.00%)      63 ( 0.00%)     0                525 ( 0.01%)      0              0                  0               0          0          0               free(arr[i]);
          9 ( 0.00%) 0          0                   3 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                  0               0          0          0             free(arr);
          9 ( 0.00%) 0          0                   6 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void mul_kij(int n, int **a, int **b, int **c)
          7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, k;
        705 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        527 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                176 ( 0.00%)      4 ( 0.00%) 0          0             for (k=0; k<n; k++) {
    123,375 ( 0.02%) 2 ( 0.14%) 2 ( 0.14%)     92,225 ( 0.04%)       0              0                175 ( 0.00%)      0              0             30,800 ( 0.18%)    180 ( 0.18%) 0          0               for (i=0; i<n; i++) {
    367,500 ( 0.07%) 0          0             153,125 ( 0.06%)  34,475 ( 1.44%)     0             30,625 ( 0.47%)      0              0                  0               0          0          0                 int x = a[i][k];
 21,590,625 ( 4.13%) 0          0          16,139,375 ( 6.46%)       0              0             30,625 ( 0.47%)      0              0          5,390,000 (31.49%) 30,650 (30.59%) 0          0                 for (j=0; j<n; j++)
192,937,500 (36.87%) 1 ( 0.07%) 1 ( 0.07%) 80,390,625 (32.19%) 350,412 (14.64%) 1,794 (57.37%) 5,359,375 (82.40%)      0              0                  0               0          0          0           	c[i][j] += x * b[k][j];   
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           /* ijk */
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
          7 ( 0.00%) 0          0                   0                0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, k;
        705 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        527 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                176 ( 0.00%)      4 ( 0.00%) 0          0             for (i=0; i<n; i++)  {
    123,375 ( 0.02%) 1 ( 0.07%) 1 ( 0.07%)     92,225 ( 0.04%)       0              0                175 ( 0.00%)      0              0             30,800 ( 0.18%)    180 ( 0.18%) 0          0               for (j=0; j<n; j++) {
     30,625 ( 0.01%) 0          0                   0                0              0             30,625 ( 0.47%)      0              0                  0               0          0          0                 int sum = 0;
 21,590,625 ( 4.13%) 1 ( 0.07%) 1 ( 0.07%) 16,139,375 ( 6.46%)       0              0             30,625 ( 0.47%)      0              0          5,390,000 (31.49%) 30,650 (30.59%) 0          0                 for (k=0; k<n; k++) 
128,625,000 (24.58%) 0          0          58,953,125 (23.60%) 987,344 (41.24%)     0                  0               0              0                  0               0          0          0           	sum += a[i][k] * b[k][j];
    367,500 ( 0.07%) 0          0             153,125 ( 0.06%)  17,170 ( 0.72%)     0             30,625 ( 0.47%)  9,734 (21.36%)     0                  0               0          0          0                 c[i][j] = sum;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           /* jik */
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void mul_jik(int n, int **a, int **b, int **c)
          7 ( 0.00%) 0          0                   0                0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, k;
        705 ( 0.00%) 0          0                 527 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                176 ( 0.00%)      4 ( 0.00%) 0          0             for (j=0; j<n; j++) {
    123,375 ( 0.02%) 0          0              92,225 ( 0.04%)       0              0                175 ( 0.00%)      0              0             30,800 ( 0.18%)    180 ( 0.18%) 0          0               for (i=0; i<n; i++) {
     30,625 ( 0.01%) 0          0                   0                0              0             30,625 ( 0.47%)      0              0                  0               0          0          0                 int sum = 0;
 21,590,625 ( 4.13%) 2 ( 0.14%) 2 ( 0.14%) 16,139,375 ( 6.46%)       0              0             30,625 ( 0.47%)      0              0          5,390,000 (31.49%) 30,650 (30.59%) 0          0                 for (k=0; k<n; k++)
128,625,000 (24.58%) 0          0          58,953,125 (23.60%) 983,318 (41.07%)     0                  0               0              0                  0               0          0          0           	sum += a[i][k] * b[k][j];
    367,500 ( 0.07%) 0          0             153,125 ( 0.06%)  18,853 ( 0.79%)     0             30,625 ( 0.47%) 30,617 (67.19%)     0                  0               0          0          0                 c[i][j] = sum;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           int main()
          8 ( 0.00%) 2 ( 0.14%) 2 ( 0.14%)          1 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, n;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int **a;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int **b;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int **c;
          1 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             int Nmax = 100; // random numbers in [0, N]
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Enter the dimension of matrices\n");
          8 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  1 ( 0.00%)      1 ( 0.00%) 0          0             if(scanf("%d", &n) != 1) {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("Error in scanf.\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               return -1;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&a, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
        705 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        527 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                176 ( 0.00%)      6 ( 0.01%) 0          0             for ( i = 0 ; i < n ; i++ )
    123,375 ( 0.02%) 0          0              92,225 ( 0.04%)       0              0                175 ( 0.00%)      0              0             30,800 ( 0.18%)    183 ( 0.18%) 0          0               for ( j = 0 ; j < n ; j++ )
    428,750 ( 0.08%) 0          0             153,125 ( 0.06%)      21 ( 0.00%)     0             61,250 ( 0.94%)  1,960 ( 4.30%) 1,794 (37.59%)         0               0          0          0                 a[i][j] = rand_int(Nmax);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&b, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
        705 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        527 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                176 ( 0.00%)      6 ( 0.01%) 0          0             for ( i = 0 ; i < n ; i++ )
    123,375 ( 0.02%) 0          0              92,225 ( 0.04%)       0              0                175 ( 0.00%)      0              0             30,800 ( 0.18%)    183 ( 0.18%) 0          0               for ( j = 0 ; j < n ; j++ )
    428,750 ( 0.08%) 0          0             153,125 ( 0.06%)      21 ( 0.00%)     0             61,250 ( 0.94%)  1,961 ( 4.30%) 1,794 (37.59%)         0               0          0          0                 b[i][j] = rand_int(Nmax);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 0          0                   1 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&c, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_kij(n, a, b, c);
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version kij is finished...\n");
          6 ( 0.00%) 0          0                   4 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_ijk(n, a, b, c);
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version ijk is finished...\n");
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_jik(n, a, b, c);
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version jik is finished...\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             /*
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("Product of entered matrices:\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               for ( i = 0 ; i < n ; i++ )
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               for ( j = 0 ; j < n ; j++ )
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("%d\t", c[i][j]);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             */
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 0          0                   2 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(a, n);
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(b, n);
          5 ( 0.00%) 0          0                   2 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(c, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          1 ( 0.00%) 0          0                   0                0              0                  0               0              0                  0               0          0          0             return 0;
          6 ( 0.00%) 0          0                   5 ( 0.00%)       1 ( 0.00%)     0                  0               0              0                  1 ( 0.00%)      1 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr               DLmr           Dw                 D1mw            DLmw           Bc                  Bcm             Bi         Bim        
--------------------------------------------------------------------------------
519,330,968 (99.23%) 25 ( 1.78%) 24 ( 1.74%) 248,563,779 (99.53%) 2,391,683 (99.89%) 1,795 (57.40%) 6,096,899 (93.74%) 44,336 (97.29%) 3,651 (76.49%) 16,509,688 (96.44%) 92,906 (92.73%) 0          0           events annotated

