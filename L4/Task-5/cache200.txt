--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul 200
Data file:        cachegrind.out.1826754
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                   D1mr                DLmr           Dw                 D1mw            DLmw           Bc                  Bcm              Bi              Bim          
--------------------------------------------------------------------------------
779,467,612 (100.0%) 1,406 (100.0%) 1,382 (100.0%) 372,182,932 (100.0%) 10,913,527 (100.0%) 3,683 (100.0%) 9,486,380 (100.0%) 76,403 (100.0%) 5,970 (100.0%) 25,345,228 (100.0%) 129,645 (100.0%) 81,598 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr               DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          file:function
--------------------------------------------------------------------------------
320,841,816 (41.16%)  5 ( 0.36%)  5 ( 0.36%) 144,401,004 (38.80%)   562,768 ( 5.16%) 2,350 (63.81%) 8,080,206 (85.18%)      0              0          8,080,401 (31.88%) 40,234 (31.03%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
224,881,816 (28.85%)  4 ( 0.28%)  4 ( 0.29%) 112,401,004 (30.20%) 4,876,177 (44.68%)     0            120,206 ( 1.27%) 29,934 (39.18%)     0          8,080,401 (31.88%) 40,234 (31.03%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
224,881,816 (28.85%)  2 ( 0.14%)  2 ( 0.14%) 112,401,004 (30.20%) 5,471,781 (50.14%)     0            120,206 ( 1.27%) 39,996 (52.35%)     0          8,080,401 (31.88%) 40,234 (31.03%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
  2,549,680 ( 0.33%)  2 ( 0.14%)  2 ( 0.14%)     640,000 ( 0.17%)         5 ( 0.00%)     2 ( 0.05%)   240,000 ( 2.53%)      0              0            397,420 ( 1.57%)  5,164 ( 3.98%)      0           0           ./stdlib/./stdlib/random_r.c:random_r
  2,240,000 ( 0.29%)  2 ( 0.14%)  1 ( 0.07%)     800,000 ( 0.21%)         2 ( 0.00%)     1 ( 0.03%)   480,000 ( 5.06%)      0              0            240,000 ( 0.95%)      8 ( 0.01%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
  1,680,000 ( 0.22%)  3 ( 0.21%)  3 ( 0.22%)     640,000 ( 0.17%)         2 ( 0.00%)     1 ( 0.03%)   160,000 ( 1.69%)      0              0            320,000 ( 1.26%)      0               0           0           ./stdlib/./stdlib/random.c:random
  1,443,694 ( 0.19%)  9 ( 0.64%)  9 ( 0.65%)     642,031 ( 0.17%)        52 ( 0.00%)     0            160,420 ( 1.69%)  5,089 ( 6.66%) 4,700 (78.73%)    80,804 ( 0.32%)    430 ( 0.33%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr               DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi         Bim        

          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           #include <stdio.h>
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           #include <stdlib.h>
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .            
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           int rand_int(int N)
    400,000 ( 0.05%) 1 ( 0.07%) 0                    0                  0              0            160,000 ( 1.69%)      0              0                  0               0          0          0           {
     80,000 ( 0.01%) 0          0                    0                  0              0             80,000 ( 0.84%)      0              0                  0               0          0          0             int val = -1;
    640,000 ( 0.08%) 1 ( 0.07%) 1 ( 0.07%)     320,000 ( 0.09%)         0              0                  0               0              0            240,000 ( 0.95%)      8 ( 0.01%) 0          0             while( val < 0 || val >= N )
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               {
    880,000 ( 0.11%) 0          0              240,000 ( 0.06%)         2 ( 0.00%)     1 ( 0.03%)   240,000 ( 2.53%)      0              0                  0               0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               }
     80,000 ( 0.01%) 0          0               80,000 ( 0.02%)         0              0                  0               0              0                  0               0          0          0             return val;
    160,000 ( 0.02%) 0          0              160,000 ( 0.04%)         0              0                  0               0              0                  0               0          0          0           }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           void allocate_mem(int*** arr, int n)
         21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                  0              0                 12 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int i;
         24 ( 0.00%) 0          0                    6 ( 0.00%)         0              0                  6 ( 0.00%)      0              0                  0               0          0          0             *arr = (int**)malloc(n*sizeof(int*));
      2,415 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       1,806 ( 0.00%)         0              0                  3 ( 0.00%)      0              0                603 ( 0.00%)      7 ( 0.01%) 0          0             for(i=0; i<n; i++)
      7,200 ( 0.00%) 0          0                2,400 ( 0.00%)         0              0              1,200 ( 0.01%)     74 ( 0.10%)    73 ( 1.22%)         0               0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
         15 ( 0.00%) 0          0                    9 ( 0.00%)         0              0                  0               0              0                  0               0          0          0           }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           void free_mem(int** arr, int n)
         18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                  0              0                  9 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int i;
      2,415 ( 0.00%) 0          0                1,806 ( 0.00%)         0              0                  3 ( 0.00%)      0              0                603 ( 0.00%)      9 ( 0.01%) 0          0             for(i=0; i<n; i++)
      4,800 ( 0.00%) 0          0                1,800 ( 0.00%)        72 ( 0.00%)     0                600 ( 0.01%)      0              0                  0               0          0          0               free(arr[i]);
          9 ( 0.00%) 0          0                    3 ( 0.00%)         0              0                  3 ( 0.00%)      0              0                  0               0          0          0             free(arr);
          9 ( 0.00%) 0          0                    6 ( 0.00%)         0              0                  0               0              0                  0               0          0          0           }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           /* kij */
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           void mul_kij(int n, int **a, int **b, int **c)
          7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                  0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int i, j, k;
        805 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         602 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                201 ( 0.00%)      4 ( 0.00%) 0          0             for (k=0; k<n; k++) {
    161,000 ( 0.02%) 2 ( 0.14%) 2 ( 0.14%)     120,400 ( 0.03%)         0              0                200 ( 0.00%)      0              0             40,200 ( 0.16%)    205 ( 0.16%) 0          0               for (i=0; i<n; i++) {
    480,000 ( 0.06%) 0          0              200,000 ( 0.05%)    45,000 ( 0.41%)     0             40,000 ( 0.42%)      0              0                  0               0          0          0                 int x = a[i][k];
 32,200,000 ( 4.13%) 0          0           24,080,000 ( 6.47%)         0              0             40,000 ( 0.42%)      0              0          8,040,000 (31.72%) 40,025 (30.87%) 0          0                 for (j=0; j<n; j++)
288,000,000 (36.95%) 1 ( 0.07%) 1 ( 0.07%) 120,000,000 (32.24%)   517,768 ( 4.74%) 2,350 (63.81%) 8,000,000 (84.33%)      0              0                  0               0          0          0           	c[i][j] += x * b[k][j];   
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 0          0                    2 ( 0.00%)         0              0                  0               0              0                  0               0          0          0           }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           /* ijk */
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
          7 ( 0.00%) 0          0                    0                  0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int i, j, k;
        805 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         602 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                201 ( 0.00%)      4 ( 0.00%) 0          0             for (i=0; i<n; i++)  {
    161,000 ( 0.02%) 1 ( 0.07%) 1 ( 0.07%)     120,400 ( 0.03%)         0              0                200 ( 0.00%)      0              0             40,200 ( 0.16%)    205 ( 0.16%) 0          0               for (j=0; j<n; j++) {
     40,000 ( 0.01%) 0          0                    0                  0              0             40,000 ( 0.42%)      0              0                  0               0          0          0                 int sum = 0;
 32,200,000 ( 4.13%) 1 ( 0.07%) 1 ( 0.07%)  24,080,000 ( 6.47%)         0              0             40,000 ( 0.42%)      0              0          8,040,000 (31.72%) 40,025 (30.87%) 0          0                 for (k=0; k<n; k++) 
192,000,000 (24.63%) 0          0           88,000,000 (23.64%) 4,846,431 (44.41%)     0                  0               0              0                  0               0          0          0           	sum += a[i][k] * b[k][j];
    480,000 ( 0.06%) 0          0              200,000 ( 0.05%)    29,746 ( 0.27%)     0             40,000 ( 0.42%) 29,934 (39.18%)     0                  0               0          0          0                 c[i][j] = sum;
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           2 ( 0.00%)         0              0                  0               0              0                  0               0          0          0           }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           /* jik */
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           void mul_jik(int n, int **a, int **b, int **c)
          7 ( 0.00%) 0          0                    0                  0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int i, j, k;
        805 ( 0.00%) 0          0                  602 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                201 ( 0.00%)      4 ( 0.00%) 0          0             for (j=0; j<n; j++) {
    161,000 ( 0.02%) 0          0              120,400 ( 0.03%)         0              0                200 ( 0.00%)      0              0             40,200 ( 0.16%)    205 ( 0.16%) 0          0               for (i=0; i<n; i++) {
     40,000 ( 0.01%) 0          0                    0                  0              0             40,000 ( 0.42%)      0              0                  0               0          0          0                 int sum = 0;
 32,200,000 ( 4.13%) 2 ( 0.14%) 2 ( 0.14%)  24,080,000 ( 6.47%)         0              0             40,000 ( 0.42%)      0              0          8,040,000 (31.72%) 40,025 (30.87%) 0          0                 for (k=0; k<n; k++)
192,000,000 (24.63%) 0          0           88,000,000 (23.64%) 5,440,718 (49.85%)     0                  0               0              0                  0               0          0          0           	sum += a[i][k] * b[k][j];
    480,000 ( 0.06%) 0          0              200,000 ( 0.05%)    31,063 ( 0.28%)     0             40,000 ( 0.42%) 39,996 (52.35%)     0                  0               0          0          0                 c[i][j] = sum;
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 0          0                    2 ( 0.00%)         0              0                  0               0              0                  0               0          0          0           }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           int main()
          8 ( 0.00%) 2 ( 0.14%) 2 ( 0.14%)           1 ( 0.00%)         0              0                  3 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int i, j, n;
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int **a;
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int **b;
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             int **c;
          1 ( 0.00%) 0          0                    0                  0              0                  1 ( 0.00%)      0              0                  0               0          0          0             int Nmax = 100; // random numbers in [0, N]
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          3 ( 0.00%) 0          0                    0                  0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Enter the dimension of matrices\n");
          8 ( 0.00%) 0          0                    0                  0              0                  1 ( 0.00%)      0              0                  1 ( 0.00%)      1 ( 0.00%) 0          0             if(scanf("%d", &n) != 1) {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               printf("Error in scanf.\n");
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               return -1;
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           1 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&a, n);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .            
        805 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         602 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                201 ( 0.00%)      6 ( 0.00%) 0          0             for ( i = 0 ; i < n ; i++ )
    161,000 ( 0.02%) 0          0              120,400 ( 0.03%)         0              0                200 ( 0.00%)      0              0             40,200 ( 0.16%)    208 ( 0.16%) 0          0               for ( j = 0 ; j < n ; j++ )
    560,000 ( 0.07%) 0          0              200,000 ( 0.05%)        23 ( 0.00%)     0             80,000 ( 0.84%)  2,546 ( 3.33%) 2,350 (39.36%)         0               0          0          0                 a[i][j] = rand_int(Nmax);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           1 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&b, n);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .            
        805 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         602 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                201 ( 0.00%)      6 ( 0.00%) 0          0             for ( i = 0 ; i < n ; i++ )
    161,000 ( 0.02%) 0          0              120,400 ( 0.03%)         0              0                200 ( 0.00%)      0              0             40,200 ( 0.16%)    208 ( 0.16%) 0          0               for ( j = 0 ; j < n ; j++ )
    560,000 ( 0.07%) 0          0              200,000 ( 0.05%)        24 ( 0.00%)     0             80,000 ( 0.84%)  2,543 ( 3.33%) 2,350 (39.36%)         0               0          0          0                 b[i][j] = rand_int(Nmax);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 0          0                    1 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&c, n);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           4 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_kij(n, a, b, c);
          3 ( 0.00%) 0          0                    0                  0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version kij is finished...\n");
          6 ( 0.00%) 0          0                    4 ( 0.00%)         1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_ijk(n, a, b, c);
          3 ( 0.00%) 0          0                    0                  0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version ijk is finished...\n");
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           4 ( 0.00%)         1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_jik(n, a, b, c);
          3 ( 0.00%) 0          0                    0                  0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version jik is finished...\n");
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             /*
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               printf("Product of entered matrices:\n");
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .            
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               for ( i = 0 ; i < n ; i++ )
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               {
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               for ( j = 0 ; j < n ; j++ )
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               printf("%d\t", c[i][j]);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .            
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               printf("\n");
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .               }
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .             */
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 0          0                    2 ( 0.00%)         1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(a, n);
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           2 ( 0.00%)         1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(b, n);
          5 ( 0.00%) 0          0                    2 ( 0.00%)         0              0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(c, n);
          .          .          .                    .                  .              .                  .               .              .                  .               .          .          .           
          1 ( 0.00%) 0          0                    0                  0              0                  0               0              0                  0               0          0          0             return 0;
          6 ( 0.00%) 0          0                    5 ( 0.00%)         1 ( 0.00%)     0                  0               0              0                  1 ( 0.00%)      1 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr                DLmr           Dw                 D1mw            DLmw           Bc                  Bcm              Bi         Bim        
--------------------------------------------------------------------------------
774,306,068 (99.34%) 25 ( 1.78%) 24 ( 1.74%) 370,652,879 (99.59%) 10,910,852 (99.98%) 2,351 (63.83%) 8,962,874 (94.48%) 75,093 (98.29%) 4,773 (79.95%) 24,563,213 (96.91%) 121,156 (93.45%) 0          0           events annotated

