--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1828033
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                   D1mr             DLmr           Dw                 D1mw            DLmw           Bc                  Bcm             Bi              Bim          
--------------------------------------------------------------------------------
330,561,325 (100.0%) 1,406 (100.0%) 1,382 (100.0%) 157,630,569 (100.0%) 981,178 (100.0%) 2,608 (100.0%) 4,223,307 (100.0%) 32,344 (100.0%) 3,651 (100.0%) 10,900,536 (100.0%) 74,638 (100.0%) 46,298 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                  D1mr             DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          file:function
--------------------------------------------------------------------------------
135,473,866 (40.98%)  5 ( 0.36%)  5 ( 0.36%) 60,975,754 (38.68%) 243,388 (24.81%) 1,275 (48.89%) 3,420,156 (80.98%)      0              0          3,420,301 (31.38%) 22,684 (30.39%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
 94,996,366 (28.74%)  4 ( 0.28%)  4 ( 0.29%) 47,475,754 (30.12%) 367,525 (37.46%)     0             67,656 ( 1.60%)  5,802 (17.94%)     0          3,420,301 (31.38%) 22,684 (30.39%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
 94,996,366 (28.74%)  2 ( 0.14%)  2 ( 0.14%) 47,475,754 (30.12%) 367,548 (37.46%)     0             67,656 ( 1.60%) 22,500 (69.56%)     0          3,420,301 (31.38%) 22,684 (30.39%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
  1,434,196 ( 0.43%)  2 ( 0.14%)  2 ( 0.14%)    360,000 ( 0.23%)       4 ( 0.00%)     2 ( 0.08%)   135,000 ( 3.20%)      0              0            223,549 ( 2.05%)  2,906 ( 3.89%)      0           0           ./stdlib/./stdlib/random_r.c:random_r
  1,260,000 ( 0.38%)  2 ( 0.14%)  1 ( 0.07%)    450,000 ( 0.29%)       1 ( 0.00%)     1 ( 0.04%)   270,000 ( 6.39%)      0              0            135,000 ( 1.24%)      8 ( 0.01%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
    945,000 ( 0.29%)  3 ( 0.21%)  3 ( 0.22%)    360,000 ( 0.23%)       2 ( 0.00%)     1 ( 0.04%)    90,000 ( 2.13%)      0              0            180,000 ( 1.65%)      0               0           0           ./stdlib/./stdlib/random.c:random
    812,794 ( 0.25%)  9 ( 0.64%)  9 ( 0.65%)    361,531 ( 0.23%)      43 ( 0.00%)     0             90,320 ( 2.14%)  2,832 ( 8.76%) 2,550 (69.84%)    45,604 ( 0.42%)    330 ( 0.44%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr             DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi         Bim        

          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           #include <stdio.h>
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           #include <stdlib.h>
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           int rand_int(int N)
    225,000 ( 0.07%) 1 ( 0.07%) 0                   0                0              0             90,000 ( 2.13%)      0              0                  0               0          0          0           {
     45,000 ( 0.01%) 0          0                   0                0              0             45,000 ( 1.07%)      0              0                  0               0          0          0             int val = -1;
    360,000 ( 0.11%) 1 ( 0.07%) 1 ( 0.07%)    180,000 ( 0.11%)       0              0                  0               0              0            135,000 ( 1.24%)      8 ( 0.01%) 0          0             while( val < 0 || val >= N )
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               {
    495,000 ( 0.15%) 0          0             135,000 ( 0.09%)       1 ( 0.00%)     1 ( 0.04%)   135,000 ( 3.20%)      0              0                  0               0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
     45,000 ( 0.01%) 0          0              45,000 ( 0.03%)       0              0                  0               0              0                  0               0          0          0             return val;
     90,000 ( 0.03%) 0          0              90,000 ( 0.06%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void allocate_mem(int*** arr, int n)
         21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                0              0                 12 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i;
         24 ( 0.00%) 0          0                   6 ( 0.00%)       0              0                  6 ( 0.00%)      0              0                  0               0          0          0             *arr = (int**)malloc(n*sizeof(int*));
      1,815 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)      1,356 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                453 ( 0.00%)      7 ( 0.01%) 0          0             for(i=0; i<n; i++)
      5,400 ( 0.00%) 0          0               1,800 ( 0.00%)       0              0                900 ( 0.02%)     54 ( 0.17%)    54 ( 1.48%)         0               0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
         15 ( 0.00%) 0          0                   9 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void free_mem(int** arr, int n)
         18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                0              0                  9 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i;
      1,815 ( 0.00%) 0          0               1,356 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                453 ( 0.00%)      9 ( 0.01%) 0          0             for(i=0; i<n; i++)
      3,600 ( 0.00%) 0          0               1,350 ( 0.00%)      54 ( 0.01%)     0                450 ( 0.01%)      0              0                  0               0          0          0               free(arr[i]);
          9 ( 0.00%) 0          0                   3 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                  0               0          0          0             free(arr);
          9 ( 0.00%) 0          0                   6 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void mul_kij(int n, int **a, int **b, int **c)
          7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, k;
        605 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        452 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                151 ( 0.00%)      4 ( 0.01%) 0          0             for (k=0; k<n; k++) {
     90,750 ( 0.03%) 2 ( 0.14%) 2 ( 0.14%)     67,800 ( 0.04%)       0              0                150 ( 0.00%)      0              0             22,650 ( 0.21%)    155 ( 0.21%) 0          0               for (i=0; i<n; i++) {
    270,000 ( 0.08%) 0          0             112,500 ( 0.07%)  25,350 ( 2.58%)     0             22,500 ( 0.53%)      0              0                  0               0          0          0                 int x = a[i][k];
 13,612,500 ( 4.12%) 0          0          10,170,000 ( 6.45%)       0              0             22,500 ( 0.53%)      0              0          3,397,500 (31.17%) 22,525 (30.18%) 0          0                 for (j=0; j<n; j++)
121,500,000 (36.76%) 1 ( 0.07%) 1 ( 0.07%) 50,625,000 (32.12%) 218,038 (22.22%) 1,275 (48.89%) 3,375,000 (79.91%)      0              0                  0               0          0          0           	c[i][j] += x * b[k][j];   
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           /* ijk */
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
          7 ( 0.00%) 0          0                   0                0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, k;
        605 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        452 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                151 ( 0.00%)      4 ( 0.01%) 0          0             for (i=0; i<n; i++)  {
     90,750 ( 0.03%) 1 ( 0.07%) 1 ( 0.07%)     67,800 ( 0.04%)       0              0                150 ( 0.00%)      0              0             22,650 ( 0.21%)    155 ( 0.21%) 0          0               for (j=0; j<n; j++) {
     22,500 ( 0.01%) 0          0                   0                0              0             22,500 ( 0.53%)      0              0                  0               0          0          0                 int sum = 0;
 13,612,500 ( 4.12%) 1 ( 0.07%) 1 ( 0.07%) 10,170,000 ( 6.45%)       0              0             22,500 ( 0.53%)      0              0          3,397,500 (31.17%) 22,525 (30.18%) 0          0                 for (k=0; k<n; k++) 
 81,000,000 (24.50%) 0          0          37,125,000 (23.55%) 366,237 (37.33%)     0                  0               0              0                  0               0          0          0           	sum += a[i][k] * b[k][j];
    270,000 ( 0.08%) 0          0             112,500 ( 0.07%)   1,288 ( 0.13%)     0             22,500 ( 0.53%)  5,802 (17.94%)     0                  0               0          0          0                 c[i][j] = sum;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           /* jik */
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           void mul_jik(int n, int **a, int **b, int **c)
          7 ( 0.00%) 0          0                   0                0              0                  5 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, k;
        605 ( 0.00%) 0          0                 452 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                151 ( 0.00%)      4 ( 0.01%) 0          0             for (j=0; j<n; j++) {
     90,750 ( 0.03%) 0          0              67,800 ( 0.04%)       0              0                150 ( 0.00%)      0              0             22,650 ( 0.21%)    155 ( 0.21%) 0          0               for (i=0; i<n; i++) {
     22,500 ( 0.01%) 0          0                   0                0              0             22,500 ( 0.53%)      0              0                  0               0          0          0                 int sum = 0;
 13,612,500 ( 4.12%) 2 ( 0.14%) 2 ( 0.14%) 10,170,000 ( 6.45%)       0              0             22,500 ( 0.53%)      0              0          3,397,500 (31.17%) 22,525 (30.18%) 0          0                 for (k=0; k<n; k++)
 81,000,000 (24.50%) 0          0          37,125,000 (23.55%) 363,496 (37.05%)     0                  0               0              0                  0               0          0          0           	sum += a[i][k] * b[k][j];
    270,000 ( 0.08%) 0          0             112,500 ( 0.07%)   4,052 ( 0.41%)     0             22,500 ( 0.53%) 22,500 (69.56%)     0                  0               0          0          0                 c[i][j] = sum;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0              0                  0               0              0                  0               0          0          0           }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           int main()
          8 ( 0.00%) 2 ( 0.14%) 2 ( 0.14%)          1 ( 0.00%)       0              0                  3 ( 0.00%)      0              0                  0               0          0          0           {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int i, j, n;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int **a;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int **b;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             int **c;
          1 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             int Nmax = 100; // random numbers in [0, N]
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Enter the dimension of matrices\n");
          8 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  1 ( 0.00%)      1 ( 0.00%) 0          0             if(scanf("%d", &n) != 1) {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("Error in scanf.\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               return -1;
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&a, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
        605 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        452 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                151 ( 0.00%)      6 ( 0.01%) 0          0             for ( i = 0 ; i < n ; i++ )
     90,750 ( 0.03%) 0          0              67,800 ( 0.04%)       0              0                150 ( 0.00%)      0              0             22,650 ( 0.21%)    158 ( 0.21%) 0          0               for ( j = 0 ; j < n ; j++ )
    315,000 ( 0.10%) 0          0             112,500 ( 0.07%)      17 ( 0.00%)     0             45,000 ( 1.07%)  1,417 ( 4.38%) 1,275 (34.92%)         0               0          0          0                 a[i][j] = rand_int(Nmax);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&b, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
        605 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        452 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                151 ( 0.00%)      6 ( 0.01%) 0          0             for ( i = 0 ; i < n ; i++ )
     90,750 ( 0.03%) 0          0              67,800 ( 0.04%)       0              0                150 ( 0.00%)      0              0             22,650 ( 0.21%)    158 ( 0.21%) 0          0               for ( j = 0 ; j < n ; j++ )
    315,000 ( 0.10%) 0          0             112,500 ( 0.07%)      19 ( 0.00%)     0             45,000 ( 1.07%)  1,415 ( 4.37%) 1,275 (34.92%)         0               0          0          0                 b[i][j] = rand_int(Nmax);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 0          0                   1 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             allocate_mem(&c, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)       0              0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_kij(n, a, b, c);
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version kij is finished...\n");
          6 ( 0.00%) 0          0                   4 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_ijk(n, a, b, c);
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version ijk is finished...\n");
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             mul_jik(n, a, b, c);
          3 ( 0.00%) 0          0                   0                0              0                  1 ( 0.00%)      0              0                  0               0          0          0             printf("Version jik is finished...\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             /*
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("Product of entered matrices:\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               for ( i = 0 ; i < n ; i++ )
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               {
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               for ( j = 0 ; j < n ; j++ )
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("%d\t", c[i][j]);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .            
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               printf("\n");
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .               }
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .             */
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          5 ( 0.00%) 0          0                   2 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(a, n);
          5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(b, n);
          5 ( 0.00%) 0          0                   2 ( 0.00%)       1 ( 0.00%)     0                  1 ( 0.00%)      0              0                  0               0          0          0             free_mem(c, n);
          .          .          .                   .                .              .                  .               .              .                  .               .          .          .           
          1 ( 0.00%) 0          0                   0                0              0                  0               0              0                  0               0          0          0             return 0;
          6 ( 0.00%) 0          0                   5 ( 0.00%)       2 ( 0.00%)     0                  0               0              0                  1 ( 0.00%)      1 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr             DLmr           Dw                 D1mw            DLmw           Bc                  Bcm             Bi         Bim        
--------------------------------------------------------------------------------
327,552,118 (99.09%) 25 ( 1.78%) 24 ( 1.74%) 156,744,679 (99.44%) 978,559 (99.73%) 1,276 (48.93%) 3,917,174 (92.75%) 31,188 (96.43%) 2,604 (71.32%) 10,442,413 (95.80%) 68,406 (91.65%) 0          0           events annotated

