--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1828026
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                  D1mr               DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          
--------------------------------------------------------------------------------
192,126,495 (100.0%) 1,405 (100.0%) 1,381 (100.0%) 91,514,235 (100.0%) 4,270,163 (100.0%) 2,208 (100.0%) 2,549,848 (100.0%) 30,373 (100.0%) 2,767 (100.0%) 6,409,821 (100.0%) 52,936 (100.0%) 32,398 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                  D1mr               DLmr         Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          file:function
--------------------------------------------------------------------------------
78,454,266 (40.83%)  5 ( 0.36%)  5 ( 0.36%) 35,313,129 (38.59%)   145,760 ( 3.41%) 875 (39.63%) 1,984,506 (77.83%)      0              0          1,984,626 (30.96%) 15,784 (29.82%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
55,032,391 (28.64%)  4 ( 0.28%)  4 ( 0.29%) 27,500,629 (30.05%) 2,006,351 (46.99%)   0             47,006 ( 1.84%) 11,625 (38.27%)     0          1,984,626 (30.96%) 15,784 (29.82%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
55,032,391 (28.64%)  2 ( 0.14%)  2 ( 0.14%) 27,500,629 (30.05%) 2,115,685 (49.55%)   0             47,006 ( 1.84%) 15,621 (51.43%)     0          1,984,626 (30.96%) 15,784 (29.82%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
   995,968 ( 0.52%)  2 ( 0.14%)  2 ( 0.14%)    250,000 ( 0.27%)         5 ( 0.00%)   2 ( 0.09%)    93,750 ( 3.68%)      0              0            155,242 ( 2.42%)  2,020 ( 3.82%)      0           0           ./stdlib/./stdlib/random_r.c:random_r
   875,000 ( 0.46%)  2 ( 0.14%)  1 ( 0.07%)    312,500 ( 0.34%)         2 ( 0.00%)   1 ( 0.05%)   187,500 ( 7.35%)      0              0             93,750 ( 1.46%)      8 ( 0.02%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
   656,250 ( 0.34%)  3 ( 0.21%)  3 ( 0.22%)    250,000 ( 0.27%)         1 ( 0.00%)   1 ( 0.05%)    62,500 ( 2.45%)      0              0            125,000 ( 1.95%)      0               0           0           ./stdlib/./stdlib/random.c:random
   564,844 ( 0.29%)  9 ( 0.64%)  9 ( 0.65%)    251,281 ( 0.27%)        29 ( 0.00%)   0             62,770 ( 2.46%)  2,000 ( 6.58%) 1,750 (63.25%)    31,754 ( 0.50%)    280 ( 0.53%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr               DLmr         Dw                 D1mw            DLmw         Bc                 Bcm             Bi         Bim        

         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           #include <stdio.h>
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           #include <stdlib.h>
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .            
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           int rand_int(int N)
   156,250 ( 0.08%) 1 ( 0.07%) 0                   0                  0            0             62,500 ( 2.45%)      0            0                  0               0          0          0           {
    31,250 ( 0.02%) 0          0                   0                  0            0             31,250 ( 1.23%)      0            0                  0               0          0          0             int val = -1;
   250,000 ( 0.13%) 1 ( 0.07%) 1 ( 0.07%)    125,000 ( 0.14%)         0            0                  0               0            0             93,750 ( 1.46%)      8 ( 0.02%) 0          0             while( val < 0 || val >= N )
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               {
   343,750 ( 0.18%) 0          0              93,750 ( 0.10%)         2 ( 0.00%)   1 ( 0.05%)    93,750 ( 3.68%)      0            0                  0               0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               }
    31,250 ( 0.02%) 0          0              31,250 ( 0.03%)         0            0                  0               0            0                  0               0          0          0             return val;
    62,500 ( 0.03%) 0          0              62,500 ( 0.07%)         0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           void allocate_mem(int*** arr, int n)
        21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                  0            0                 12 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int i;
        24 ( 0.00%) 0          0                   6 ( 0.00%)         0            0                  6 ( 0.00%)      0            0                  0               0          0          0             *arr = (int**)malloc(n*sizeof(int*));
     1,515 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)      1,131 ( 0.00%)         0            0                  3 ( 0.00%)      0            0                378 ( 0.01%)      6 ( 0.01%) 0          0             for(i=0; i<n; i++)
     4,500 ( 0.00%) 0          0               1,500 ( 0.00%)         0            0                750 ( 0.03%)     48 ( 0.16%)  45 ( 1.63%)         0               0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
        15 ( 0.00%) 0          0                   9 ( 0.00%)         0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           void free_mem(int** arr, int n)
        18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                  0            0                  9 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int i;
     1,515 ( 0.00%) 0          0               1,131 ( 0.00%)         0            0                  3 ( 0.00%)      0            0                378 ( 0.01%)      7 ( 0.01%) 0          0             for(i=0; i<n; i++)
     3,000 ( 0.00%) 0          0               1,125 ( 0.00%)        26 ( 0.00%)   0                375 ( 0.01%)      0            0                  0               0          0          0               free(arr[i]);
         9 ( 0.00%) 0          0                   3 ( 0.00%)         0            0                  3 ( 0.00%)      0            0                  0               0          0          0             free(arr);
         9 ( 0.00%) 0          0                   6 ( 0.00%)         0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           void mul_kij(int n, int **a, int **b, int **c)
         7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0                  0            0                  5 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int i, j, k;
       505 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        377 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                126 ( 0.00%)      4 ( 0.01%) 0          0             for (k=0; k<n; k++) {
    63,125 ( 0.03%) 2 ( 0.14%) 2 ( 0.14%)     47,125 ( 0.05%)         0            0                125 ( 0.00%)      0            0             15,750 ( 0.25%)    130 ( 0.25%) 0          0               for (i=0; i<n; i++) {
   187,500 ( 0.10%) 0          0              78,125 ( 0.09%)    17,622 ( 0.41%)   0             15,625 ( 0.61%)      0            0                  0               0          0          0                 int x = a[i][k];
 7,890,625 ( 4.11%) 0          0           5,890,625 ( 6.44%)         0            0             15,625 ( 0.61%)      0            0          1,968,750 (30.71%) 15,650 (29.56%) 0          0                 for (j=0; j<n; j++)
70,312,500 (36.60%) 1 ( 0.07%) 1 ( 0.07%) 29,296,875 (32.01%)   128,138 ( 3.00%) 875 (39.63%) 1,953,125 (76.60%)      0            0                  0               0          0          0           	c[i][j] += x * b[k][j];   
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             }
         4 ( 0.00%) 0          0                   2 ( 0.00%)         0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           /* ijk */
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
         7 ( 0.00%) 0          0                   0                  0            0                  5 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int i, j, k;
       505 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        377 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                126 ( 0.00%)      4 ( 0.01%) 0          0             for (i=0; i<n; i++)  {
    63,125 ( 0.03%) 1 ( 0.07%) 1 ( 0.07%)     47,125 ( 0.05%)         0            0                125 ( 0.00%)      0            0             15,750 ( 0.25%)    130 ( 0.25%) 0          0               for (j=0; j<n; j++) {
    15,625 ( 0.01%) 0          0                   0                  0            0             15,625 ( 0.61%)      0            0                  0               0          0          0                 int sum = 0;
 7,890,625 ( 4.11%) 1 ( 0.07%) 1 ( 0.07%)  5,890,625 ( 6.44%)         0            0             15,625 ( 0.61%)      0            0          1,968,750 (30.71%) 15,650 (29.56%) 0          0                 for (k=0; k<n; k++) 
46,875,000 (24.40%) 0          0          21,484,375 (23.48%) 2,004,396 (46.94%)   0                  0               0            0                  0               0          0          0           	sum += a[i][k] * b[k][j];
   187,500 ( 0.10%) 0          0              78,125 ( 0.09%)     1,955 ( 0.05%)   0             15,625 ( 0.61%) 11,625 (38.27%)   0                  0               0          0          0                 c[i][j] = sum;
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             }
         4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)         0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           /* jik */
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           void mul_jik(int n, int **a, int **b, int **c)
         7 ( 0.00%) 0          0                   0                  0            0                  5 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int i, j, k;
       505 ( 0.00%) 0          0                 377 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                126 ( 0.00%)      4 ( 0.01%) 0          0             for (j=0; j<n; j++) {
    63,125 ( 0.03%) 0          0              47,125 ( 0.05%)         0            0                125 ( 0.00%)      0            0             15,750 ( 0.25%)    130 ( 0.25%) 0          0               for (i=0; i<n; i++) {
    15,625 ( 0.01%) 0          0                   0                  0            0             15,625 ( 0.61%)      0            0                  0               0          0          0                 int sum = 0;
 7,890,625 ( 4.11%) 2 ( 0.14%) 2 ( 0.14%)  5,890,625 ( 6.44%)         0            0             15,625 ( 0.61%)      0            0          1,968,750 (30.71%) 15,650 (29.56%) 0          0                 for (k=0; k<n; k++)
46,875,000 (24.40%) 0          0          21,484,375 (23.48%) 2,111,882 (49.46%)   0                  0               0            0                  0               0          0          0           	sum += a[i][k] * b[k][j];
   187,500 ( 0.10%) 0          0              78,125 ( 0.09%)     3,803 ( 0.09%)   0             15,625 ( 0.61%) 15,621 (51.43%)   0                  0               0          0          0                 c[i][j] = sum;
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             }
         4 ( 0.00%) 0          0                   2 ( 0.00%)         0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           int main()
         8 ( 0.00%) 2 ( 0.14%) 2 ( 0.14%)          1 ( 0.00%)         0            0                  3 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int i, j, n;
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int **a;
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int **b;
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             int **c;
         1 ( 0.00%) 0          0                   0                  0            0                  1 ( 0.00%)      0            0                  0               0          0          0             int Nmax = 100; // random numbers in [0, N]
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         3 ( 0.00%) 0          0                   0                  0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Enter the dimension of matrices\n");
         8 ( 0.00%) 0          0                   0                  0            0                  1 ( 0.00%)      0            0                  1 ( 0.00%)      1 ( 0.00%) 0          0             if(scanf("%d", &n) != 1) {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               printf("Error in scanf.\n");
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               return -1;
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                  0               0          0          0             allocate_mem(&a, n);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .            
       505 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        377 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                126 ( 0.00%)      6 ( 0.01%) 0          0             for ( i = 0 ; i < n ; i++ )
    63,125 ( 0.03%) 0          0              47,125 ( 0.05%)         0            0                125 ( 0.00%)      0            0             15,750 ( 0.25%)    133 ( 0.25%) 0          0               for ( j = 0 ; j < n ; j++ )
   218,750 ( 0.11%) 0          0              78,125 ( 0.09%)        12 ( 0.00%)   0             31,250 ( 1.23%)  1,000 ( 3.29%) 875 (31.62%)         0               0          0          0                 a[i][j] = rand_int(Nmax);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                  0               0          0          0             allocate_mem(&b, n);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .            
       505 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        377 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                126 ( 0.00%)      6 ( 0.01%) 0          0             for ( i = 0 ; i < n ; i++ )
    63,125 ( 0.03%) 0          0              47,125 ( 0.05%)         0            0                125 ( 0.00%)      0            0             15,750 ( 0.25%)    133 ( 0.25%) 0          0               for ( j = 0 ; j < n ; j++ )
   218,750 ( 0.11%) 0          0              78,125 ( 0.09%)        13 ( 0.00%)   0             31,250 ( 1.23%)  1,000 ( 3.29%) 875 (31.62%)         0               0          0          0                 b[i][j] = rand_int(Nmax);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 0          0                   1 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                  0               0          0          0             allocate_mem(&c, n);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                  0               0          0          0             mul_kij(n, a, b, c);
         3 ( 0.00%) 0          0                   0                  0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Version kij is finished...\n");
         6 ( 0.00%) 0          0                   4 ( 0.00%)         1 ( 0.00%)   0                  1 ( 0.00%)      0            0                  0               0          0          0             mul_ijk(n, a, b, c);
         3 ( 0.00%) 0          0                   0                  0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Version ijk is finished...\n");
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)         1 ( 0.00%)   0                  1 ( 0.00%)      0            0                  0               0          0          0             mul_jik(n, a, b, c);
         3 ( 0.00%) 0          0                   0                  0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Version jik is finished...\n");
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             /*
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               printf("Product of entered matrices:\n");
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .            
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               for ( i = 0 ; i < n ; i++ )
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               {
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               for ( j = 0 ; j < n ; j++ )
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               printf("%d\t", c[i][j]);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .            
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               printf("\n");
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .             */
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 0          0                   2 ( 0.00%)         1 ( 0.00%)   0                  1 ( 0.00%)      0            0                  0               0          0          0             free_mem(a, n);
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                  0               0          0          0             free_mem(b, n);
         5 ( 0.00%) 0          0                   2 ( 0.00%)         0            0                  1 ( 0.00%)      0            0                  0               0          0          0             free_mem(c, n);
         .          .          .                   .                  .            .                  .               .            .                  .               .          .          .           
         1 ( 0.00%) 0          0                   0                  0            0                  0               0            0                  0               0          0          0             return 0;
         6 ( 0.00%) 0          0                   5 ( 0.00%)         1 ( 0.00%)   0                  0               0            0                  1 ( 0.00%)      1 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                  D1mr               DLmr         Dw                 D1mw            DLmw           Bc                 Bcm             Bi         Bim        
--------------------------------------------------------------------------------
189,969,518 (98.88%) 25 ( 1.78%) 24 ( 1.74%) 90,883,079 (99.31%) 4,267,853 (99.95%) 876 (39.67%) 2,329,949 (91.38%) 29,294 (96.45%) 1,795 (64.87%) 6,080,138 (94.86%) 47,653 (90.02%) 0          0           events annotated

