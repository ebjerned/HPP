--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1828001
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  I1mr           ILmr           Dr                  D1mr             DLmr           Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          
--------------------------------------------------------------------------------
99,040,097 (100.0%) 1,399 (100.0%) 1,375 (100.0%) 47,088,748 (100.0%) 214,408 (100.0%) 1,883 (100.0%) 1,390,150 (100.0%) 12,933 (100.0%) 2,033 (100.0%) 3,366,007 (100.0%) 35,199 (100.0%) 20,998 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                  D1mr            DLmr         Dw                 D1mw            DLmw           Bc                 Bcm             Bi              Bim          file:function
--------------------------------------------------------------------------------
40,210,916 (40.60%)  5 ( 0.36%)  5 ( 0.36%) 18,100,504 (38.44%) 78,232 (36.49%) 550 (29.21%) 1,020,106 (73.38%)      0              0          1,020,201 (30.31%) 10,134 (28.79%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
28,220,916 (28.49%)  4 ( 0.29%)  4 ( 0.29%) 14,100,504 (29.94%) 65,753 (30.67%)   0             30,106 ( 2.17%)    650 ( 5.03%)     0          1,020,201 (30.31%) 10,134 (28.79%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
28,220,916 (28.49%)  2 ( 0.14%)  2 ( 0.15%) 14,100,504 (29.94%) 68,146 (31.78%)   0             30,106 ( 2.17%) 10,000 (77.32%)     0          1,020,201 (30.31%) 10,134 (28.79%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
   637,420 ( 0.64%)  2 ( 0.14%)  2 ( 0.15%)    160,000 ( 0.34%)      4 ( 0.00%)   2 ( 0.11%)    60,000 ( 4.32%)      0              0             99,355 ( 2.95%)  1,294 ( 3.68%)      0           0           ./stdlib/./stdlib/random_r.c:random_r
   560,000 ( 0.57%)  2 ( 0.14%)  1 ( 0.07%)    200,000 ( 0.42%)      1 ( 0.00%)   1 ( 0.05%)   120,000 ( 8.63%)      0              0             60,000 ( 1.78%)      8 ( 0.02%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
   420,000 ( 0.42%)  3 ( 0.21%)  3 ( 0.22%)    160,000 ( 0.34%)      1 ( 0.00%)   1 ( 0.05%)    40,000 ( 2.88%)      0              0             80,000 ( 2.38%)      0               0           0           ./stdlib/./stdlib/random.c:random
   361,894 ( 0.37%)  9 ( 0.64%)  9 ( 0.65%)    161,031 ( 0.34%)     23 ( 0.01%)   0             40,220 ( 2.89%)  1,247 ( 9.64%) 1,100 (54.11%)    20,404 ( 0.61%)    230 ( 0.65%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main
   100,000 ( 0.10%)  1 ( 0.07%)  1 ( 0.07%)     20,000 ( 0.04%)      0            0             20,000 ( 1.44%)      0              0                  0               0               0           0           ./stdlib/./stdlib/rand.c:rand

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr            DLmr         Dw                 D1mw            DLmw         Bc                 Bcm             Bi         Bim        

         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           #include <stdio.h>
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           #include <stdlib.h>
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .            
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           int rand_int(int N)
   100,000 ( 0.10%) 1 ( 0.07%) 0                   0               0            0             40,000 ( 2.88%)      0            0                  0               0          0          0           {
    20,000 ( 0.02%) 0          0                   0               0            0             20,000 ( 1.44%)      0            0                  0               0          0          0             int val = -1;
   160,000 ( 0.16%) 1 ( 0.07%) 1 ( 0.07%)     80,000 ( 0.17%)      0            0                  0               0            0             60,000 ( 1.78%)      8 ( 0.02%) 0          0             while( val < 0 || val >= N )
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               {
   220,000 ( 0.22%) 0          0              60,000 ( 0.13%)      1 ( 0.00%)   1 ( 0.05%)    60,000 ( 4.32%)      0            0                  0               0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               }
    20,000 ( 0.02%) 0          0              20,000 ( 0.04%)      0            0                  0               0            0                  0               0          0          0             return val;
    40,000 ( 0.04%) 0          0              40,000 ( 0.08%)      0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           void allocate_mem(int*** arr, int n)
        21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0               0            0                 12 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int i;
        24 ( 0.00%) 0          0                   6 ( 0.00%)      0            0                  6 ( 0.00%)      0            0                  0               0          0          0             *arr = (int**)malloc(n*sizeof(int*));
     1,215 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        906 ( 0.00%)      0            0                  3 ( 0.00%)      0            0                303 ( 0.01%)      7 ( 0.02%) 0          0             for(i=0; i<n; i++)
     3,600 ( 0.00%) 0          0               1,200 ( 0.00%)      0            0                600 ( 0.04%)     36 ( 0.28%)  36 ( 1.77%)         0               0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
        15 ( 0.00%) 0          0                   9 ( 0.00%)      0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           void free_mem(int** arr, int n)
        18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0               0            0                  9 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int i;
     1,215 ( 0.00%) 0          0                 906 ( 0.00%)      0            0                  3 ( 0.00%)      0            0                303 ( 0.01%)      7 ( 0.02%) 0          0             for(i=0; i<n; i++)
     2,400 ( 0.00%) 0          0                 900 ( 0.00%)     33 ( 0.02%)   0                300 ( 0.02%)      0            0                  0               0          0          0               free(arr[i]);
         9 ( 0.00%) 0          0                   3 ( 0.00%)      0            0                  3 ( 0.00%)      0            0                  0               0          0          0             free(arr);
         9 ( 0.00%) 0          0                   6 ( 0.00%)      0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           void mul_kij(int n, int **a, int **b, int **c)
         7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          0               0            0                  5 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int i, j, k;
       405 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        302 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                101 ( 0.00%)      4 ( 0.01%) 0          0             for (k=0; k<n; k++) {
    40,500 ( 0.04%) 2 ( 0.14%) 2 ( 0.15%)     30,200 ( 0.06%)      0            0                100 ( 0.01%)      0            0             10,100 ( 0.30%)    105 ( 0.30%) 0          0               for (i=0; i<n; i++) {
   120,000 ( 0.12%) 0          0              50,000 ( 0.11%) 11,297 ( 5.27%)   0             10,000 ( 0.72%)      0            0                  0               0          0          0                 int x = a[i][k];
 4,050,000 ( 4.09%) 0          0           3,020,000 ( 6.41%)      0            0             10,000 ( 0.72%)      0            0          1,010,000 (30.01%) 10,025 (28.48%) 0          0                 for (j=0; j<n; j++)
36,000,000 (36.35%) 1 ( 0.07%) 1 ( 0.07%) 15,000,000 (31.85%) 66,935 (31.22%) 550 (29.21%) 1,000,000 (71.93%)      0            0                  0               0          0          0           	c[i][j] += x * b[k][j];   
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             }
         4 ( 0.00%) 0          0                   2 ( 0.00%)      0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           /* ijk */
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
         7 ( 0.00%) 0          0                   0               0            0                  5 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int i, j, k;
       405 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        302 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                101 ( 0.00%)      4 ( 0.01%) 0          0             for (i=0; i<n; i++)  {
    40,500 ( 0.04%) 1 ( 0.07%) 1 ( 0.07%)     30,200 ( 0.06%)      0            0                100 ( 0.01%)      0            0             10,100 ( 0.30%)    105 ( 0.30%) 0          0               for (j=0; j<n; j++) {
    10,000 ( 0.01%) 0          0                   0               0            0             10,000 ( 0.72%)      0            0                  0               0          0          0                 int sum = 0;
 4,050,000 ( 4.09%) 1 ( 0.07%) 1 ( 0.07%)  3,020,000 ( 6.41%)      0            0             10,000 ( 0.72%)      0            0          1,010,000 (30.01%) 10,025 (28.48%) 0          0                 for (k=0; k<n; k++) 
24,000,000 (24.23%) 0          0          11,000,000 (23.36%) 65,741 (30.66%)   0                  0               0            0                  0               0          0          0           	sum += a[i][k] * b[k][j];
   120,000 ( 0.12%) 0          0              50,000 ( 0.11%)     12 ( 0.01%)   0             10,000 ( 0.72%)    650 ( 5.03%)   0                  0               0          0          0                 c[i][j] = sum;
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             }
         4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)      0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           /* jik */
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           void mul_jik(int n, int **a, int **b, int **c)
         7 ( 0.00%) 0          0                   0               0            0                  5 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int i, j, k;
       405 ( 0.00%) 0          0                 302 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                101 ( 0.00%)      4 ( 0.01%) 0          0             for (j=0; j<n; j++) {
    40,500 ( 0.04%) 0          0              30,200 ( 0.06%)      0            0                100 ( 0.01%)      0            0             10,100 ( 0.30%)    105 ( 0.30%) 0          0               for (i=0; i<n; i++) {
    10,000 ( 0.01%) 0          0                   0               0            0             10,000 ( 0.72%)      0            0                  0               0          0          0                 int sum = 0;
 4,050,000 ( 4.09%) 2 ( 0.14%) 2 ( 0.15%)  3,020,000 ( 6.41%)      0            0             10,000 ( 0.72%)      0            0          1,010,000 (30.01%) 10,025 (28.48%) 0          0                 for (k=0; k<n; k++)
24,000,000 (24.23%) 0          0          11,000,000 (23.36%) 66,851 (31.18%)   0                  0               0            0                  0               0          0          0           	sum += a[i][k] * b[k][j];
   120,000 ( 0.12%) 0          0              50,000 ( 0.11%)  1,295 ( 0.60%)   0             10,000 ( 0.72%) 10,000 (77.32%)   0                  0               0          0          0                 c[i][j] = sum;
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             }
         4 ( 0.00%) 0          0                   2 ( 0.00%)      0            0                  0               0            0                  0               0          0          0           }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           int main()
         8 ( 0.00%) 2 ( 0.14%) 2 ( 0.15%)          1 ( 0.00%)      0            0                  3 ( 0.00%)      0            0                  0               0          0          0           {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int i, j, n;
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int **a;
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int **b;
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             int **c;
         1 ( 0.00%) 0          0                   0               0            0                  1 ( 0.00%)      0            0                  0               0          0          0             int Nmax = 100; // random numbers in [0, N]
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         3 ( 0.00%) 0          0                   0               0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Enter the dimension of matrices\n");
         8 ( 0.00%) 0          0                   0               0            0                  1 ( 0.00%)      0            0                  1 ( 0.00%)      1 ( 0.00%) 0          0             if(scanf("%d", &n) != 1) {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               printf("Error in scanf.\n");
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               return -1;
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                  0               0          0          0             allocate_mem(&a, n);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .            
       405 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        302 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                101 ( 0.00%)      6 ( 0.02%) 0          0             for ( i = 0 ; i < n ; i++ )
    40,500 ( 0.04%) 0          0              30,200 ( 0.06%)      0            0                100 ( 0.01%)      0            0             10,100 ( 0.30%)    108 ( 0.31%) 0          0               for ( j = 0 ; j < n ; j++ )
   140,000 ( 0.14%) 0          0              50,000 ( 0.11%)     10 ( 0.00%)   0             20,000 ( 1.44%)    623 ( 4.82%) 550 (27.05%)         0               0          0          0                 a[i][j] = rand_int(Nmax);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          1 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                  0               0          0          0             allocate_mem(&b, n);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .            
       405 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)        302 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                101 ( 0.00%)      6 ( 0.02%) 0          0             for ( i = 0 ; i < n ; i++ )
    40,500 ( 0.04%) 0          0              30,200 ( 0.06%)      0            0                100 ( 0.01%)      0            0             10,100 ( 0.30%)    108 ( 0.31%) 0          0               for ( j = 0 ; j < n ; j++ )
   140,000 ( 0.14%) 0          0              50,000 ( 0.11%)      9 ( 0.00%)   0             20,000 ( 1.44%)    624 ( 4.82%) 550 (27.05%)         0               0          0          0                 b[i][j] = rand_int(Nmax);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 0          0                   1 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                  0               0          0          0             allocate_mem(&c, n);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                  0               0          0          0             mul_kij(n, a, b, c);
         3 ( 0.00%) 0          0                   0               0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Version kij is finished...\n");
         6 ( 0.00%) 0          0                   4 ( 0.00%)      1 ( 0.00%)   0                  1 ( 0.00%)      0            0                  0               0          0          0             mul_ijk(n, a, b, c);
         3 ( 0.00%) 0          0                   0               0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Version ijk is finished...\n");
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          4 ( 0.00%)      1 ( 0.00%)   0                  1 ( 0.00%)      0            0                  0               0          0          0             mul_jik(n, a, b, c);
         3 ( 0.00%) 0          0                   0               0            0                  1 ( 0.00%)      0            0                  0               0          0          0             printf("Version jik is finished...\n");
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             /*
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               printf("Product of entered matrices:\n");
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .            
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               for ( i = 0 ; i < n ; i++ )
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               {
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               for ( j = 0 ; j < n ; j++ )
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               printf("%d\t", c[i][j]);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .            
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               printf("\n");
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .               }
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .             */
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         5 ( 0.00%) 0          0                   2 ( 0.00%)      1 ( 0.00%)   0                  1 ( 0.00%)      0            0                  0               0          0          0             free_mem(a, n);
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)          2 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                  0               0          0          0             free_mem(b, n);
         5 ( 0.00%) 0          0                   2 ( 0.00%)      0            0                  1 ( 0.00%)      0            0                  0               0          0          0             free_mem(c, n);
         .          .          .                   .               .            .                  .               .            .                  .               .          .          .           
         1 ( 0.00%) 0          0                   0               0            0                  0               0            0                  0               0          0          0             return 0;
         6 ( 0.00%) 0          0                   5 ( 0.00%)      1 ( 0.00%)   0                  0               0            0                  1 ( 0.00%)      1 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                  D1mr             DLmr         Dw                 D1mw            DLmw           Bc                 Bcm             Bi         Bim        
--------------------------------------------------------------------------------
97,583,168 (98.53%) 25 ( 1.79%) 24 ( 1.75%) 46,666,479 (99.10%) 212,188 (98.96%) 551 (29.26%) 1,241,474 (89.31%) 11,933 (92.27%) 1,136 (55.88%) 3,141,613 (93.33%) 30,654 (87.09%) 0          0           events annotated

