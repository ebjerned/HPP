--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1827907
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  I1mr           ILmr           Dr                 D1mr           DLmr           Dw               D1mw           DLmw         Bc               Bcm             Bi             Bim          
--------------------------------------------------------------------------------
12,903,417 (100.0%) 1,402 (100.0%) 1,378 (100.0%) 6,057,191 (100.0%) 8,333 (100.0%) 1,445 (100.0%) 237,091 (100.0%) 2,735 (100.0%) 989 (100.0%) 491,229 (100.0%) 11,476 (100.0%) 5,698 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                 I1mr        ILmr        Dr                 D1mr           DLmr         Dw               D1mw           DLmw         Bc               Bcm            Bi             Bim          file:function
--------------------------------------------------------------------------------
5,052,966 (39.16%)  5 ( 0.36%)  5 ( 0.36%) 2,275,254 (37.56%) 1,478 (17.74%) 112 ( 7.75%) 130,056 (54.85%)     0            0          130,101 (26.48%) 2,584 (22.52%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
3,555,466 (27.55%)  4 ( 0.29%)  4 ( 0.29%) 1,775,254 (29.31%)   365 ( 4.38%)   0            7,556 ( 3.19%)   162 ( 5.92%)   0          130,101 (26.48%) 2,584 (22.52%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
3,555,466 (27.55%)  2 ( 0.14%)  2 ( 0.15%) 1,775,254 (29.31%) 4,487 (53.85%)   0            7,556 ( 3.19%) 1,483 (54.22%)   0          130,101 (26.48%) 2,584 (22.52%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
  159,356 ( 1.23%)  2 ( 0.14%)  2 ( 0.15%)    40,000 ( 0.66%)     4 ( 0.05%)   2 ( 0.14%)  15,000 ( 6.33%)     0            0           24,839 ( 5.06%)   326 ( 2.84%)     0           0           ./stdlib/./stdlib/random_r.c:random_r
  140,000 ( 1.08%)  2 ( 0.14%)  1 ( 0.07%)    50,000 ( 0.83%)     1 ( 0.01%)   1 ( 0.07%)  30,000 (12.65%)     0            0           15,000 ( 3.05%)     8 ( 0.07%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
  105,000 ( 0.81%)  3 ( 0.21%)  3 ( 0.22%)    40,000 ( 0.66%)     1 ( 0.01%)   1 ( 0.07%)  10,000 ( 4.22%)     0            0           20,000 ( 4.07%)     0              0           0           ./stdlib/./stdlib/random.c:random
   90,994 ( 0.71%)  9 ( 0.64%)  9 ( 0.65%)    40,531 ( 0.67%)     5 ( 0.06%)   0           10,120 ( 4.27%)   227 ( 8.30%) 224 (22.65%)   5,204 ( 1.06%)   129 ( 1.12%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main
   25,000 ( 0.19%)  1 ( 0.07%)  1 ( 0.07%)     5,000 ( 0.08%)     0            0            5,000 ( 2.11%)     0            0                0              0              0           0           ./stdlib/./stdlib/rand.c:rand
   23,913 ( 0.19%) 18 ( 1.28%) 18 ( 1.31%)     8,029 ( 0.13%)   242 ( 2.90%) 156 (10.80%)   3,362 ( 1.42%)    11 ( 0.40%)   3 ( 0.30%)   3,641 ( 0.74%)   247 ( 2.15%)     0           0           ./elf/./elf/dl-lookup.c:do_lookup_x
   21,381 ( 0.17%) 25 ( 1.78%) 24 ( 1.74%)     3,587 ( 0.06%)     8 ( 0.10%)   0            3,743 ( 1.58%)   158 ( 5.78%) 156 (15.77%)   2,963 ( 0.60%)    44 ( 0.38%)     0           0           ./malloc/./malloc/malloc.c:_int_malloc
   20,733 ( 0.16%) 11 ( 0.78%) 11 ( 0.80%)     4,385 ( 0.07%)   106 ( 1.27%)  89 ( 6.16%)   2,305 ( 0.97%)    12 ( 0.44%)   1 ( 0.10%)   2,479 ( 0.50%)   171 ( 1.49%)     0           0           ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x
   20,613 ( 0.16%)  6 ( 0.43%)  6 ( 0.44%)     3,785 ( 0.06%)    55 ( 0.66%)  55 ( 3.81%)      96 ( 0.04%)     2 ( 0.07%)   2 ( 0.20%)   5,800 ( 1.18%)   572 ( 4.98%)     0           0           ./elf/./elf/dl-tunables.c:__GI___tunables_init
   18,733 ( 0.15%) 17 ( 1.21%) 17 ( 1.23%)     5,342 ( 0.09%)    91 ( 1.09%)   0            2,236 ( 0.94%)     0            0            3,795 ( 0.77%)    33 ( 0.29%)     0           0           ./malloc/./malloc/malloc.c:_int_free
   17,847 ( 0.14%) 21 ( 1.50%) 21 ( 1.52%)     4,477 ( 0.07%)   424 ( 5.09%) 394 (27.27%)   2,038 ( 0.86%)   250 ( 9.14%) 236 (23.86%)   2,464 ( 0.50%)    66 ( 0.58%)   151 ( 2.65%) 48 (27.12%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                 I1mr       ILmr       Dr                 D1mr           DLmr         Dw               D1mw           DLmw         Bc               Bcm            Bi         Bim        

        .          .          .                  .              .            .                .              .            .                .              .          .          .           #include <stdio.h>
        .          .          .                  .              .            .                .              .            .                .              .          .          .           #include <stdlib.h>
        .          .          .                  .              .            .                .              .            .                .              .          .          .            
        .          .          .                  .              .            .                .              .            .                .              .          .          .           int rand_int(int N)
   25,000 ( 0.19%) 1 ( 0.07%) 0                  0              0            0           10,000 ( 4.22%)     0            0                0              0          0          0           {
    5,000 ( 0.04%) 0          0                  0              0            0            5,000 ( 2.11%)     0            0                0              0          0          0             int val = -1;
   40,000 ( 0.31%) 1 ( 0.07%) 1 ( 0.07%)    20,000 ( 0.33%)     0            0                0              0            0           15,000 ( 3.05%)     8 ( 0.07%) 0          0             while( val < 0 || val >= N )
        .          .          .                  .              .            .                .              .            .                .              .          .          .               {
   55,000 ( 0.43%) 0          0             15,000 ( 0.25%)     1 ( 0.01%)   1 ( 0.07%)  15,000 ( 6.33%)     0            0                0              0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
        .          .          .                  .              .            .                .              .            .                .              .          .          .               }
    5,000 ( 0.04%) 0          0              5,000 ( 0.08%)     0            0                0              0            0                0              0          0          0             return val;
   10,000 ( 0.08%) 0          0             10,000 ( 0.17%)     0            0                0              0            0                0              0          0          0           }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .           void allocate_mem(int*** arr, int n)
       21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0            0               12 ( 0.01%)     0            0                0              0          0          0           {
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int i;
       24 ( 0.00%) 0          0                  6 ( 0.00%)     0            0                6 ( 0.00%)     0            0                0              0          0          0             *arr = (int**)malloc(n*sizeof(int*));
      615 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       456 ( 0.01%)     0            0                3 ( 0.00%)     0            0              153 ( 0.03%)     5 ( 0.04%) 0          0             for(i=0; i<n; i++)
    1,800 ( 0.01%) 0          0                600 ( 0.01%)     0            0              300 ( 0.13%)    18 ( 0.66%)  18 ( 1.82%)       0              0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
       15 ( 0.00%) 0          0                  9 ( 0.00%)     0            0                0              0            0                0              0          0          0           }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .           void free_mem(int** arr, int n)
       18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0            0                9 ( 0.00%)     0            0                0              0          0          0           {
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int i;
      615 ( 0.00%) 0          0                456 ( 0.01%)     0            0                3 ( 0.00%)     0            0              153 ( 0.03%)     7 ( 0.06%) 0          0             for(i=0; i<n; i++)
    1,200 ( 0.01%) 0          0                450 ( 0.01%)     5 ( 0.06%)   0              150 ( 0.06%)     0            0                0              0          0          0               free(arr[i]);
        9 ( 0.00%) 0          0                  3 ( 0.00%)     0            0                3 ( 0.00%)     0            0                0              0          0          0             free(arr);
        9 ( 0.00%) 0          0                  6 ( 0.00%)     0            0                0              0            0                0              0          0          0           }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
        .          .          .                  .              .            .                .              .            .                .              .          .          .           void mul_kij(int n, int **a, int **b, int **c)
        7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0            0                5 ( 0.00%)     0            0                0              0          0          0           {
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int i, j, k;
      205 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       152 ( 0.00%)     0            0                1 ( 0.00%)     0            0               51 ( 0.01%)     4 ( 0.03%) 0          0             for (k=0; k<n; k++) {
   10,250 ( 0.08%) 2 ( 0.14%) 2 ( 0.15%)     7,600 ( 0.13%)     0            0               50 ( 0.02%)     0            0            2,550 ( 0.52%)    55 ( 0.48%) 0          0               for (i=0; i<n; i++) {
   30,000 ( 0.23%) 0          0             12,500 ( 0.21%)   449 ( 5.39%)   0            2,500 ( 1.05%)     0            0                0              0          0          0                 int x = a[i][k];
  512,500 ( 3.97%) 0          0            380,000 ( 6.27%)     0            0            2,500 ( 1.05%)     0            0          127,500 (25.96%) 2,525 (22.00%) 0          0                 for (j=0; j<n; j++)
4,500,000 (34.87%) 1 ( 0.07%) 1 ( 0.07%) 1,875,000 (30.95%) 1,029 (12.35%) 112 ( 7.75%) 125,000 (52.72%)     0            0                0              0          0          0           	c[i][j] += x * b[k][j];   
        .          .          .                  .              .            .                .              .            .                .              .          .          .               }
        .          .          .                  .              .            .                .              .            .                .              .          .          .             }
        4 ( 0.00%) 0          0                  2 ( 0.00%)     0            0                0              0            0                0              0          0          0           }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .           /* ijk */
        .          .          .                  .              .            .                .              .            .                .              .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
        7 ( 0.00%) 0          0                  0              0            0                5 ( 0.00%)     0            0                0              0          0          0           {
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int i, j, k;
      205 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       152 ( 0.00%)     0            0                1 ( 0.00%)     0            0               51 ( 0.01%)     4 ( 0.03%) 0          0             for (i=0; i<n; i++)  {
   10,250 ( 0.08%) 1 ( 0.07%) 1 ( 0.07%)     7,600 ( 0.13%)     0            0               50 ( 0.02%)     0            0            2,550 ( 0.52%)    55 ( 0.48%) 0          0               for (j=0; j<n; j++) {
    2,500 ( 0.02%) 0          0                  0              0            0            2,500 ( 1.05%)     0            0                0              0          0          0                 int sum = 0;
  512,500 ( 3.97%) 1 ( 0.07%) 1 ( 0.07%)   380,000 ( 6.27%)     0            0            2,500 ( 1.05%)     0            0          127,500 (25.96%) 2,525 (22.00%) 0          0                 for (k=0; k<n; k++) 
3,000,000 (23.25%) 0          0          1,375,000 (22.70%)   359 ( 4.31%)   0                0              0            0                0              0          0          0           	sum += a[i][k] * b[k][j];
   30,000 ( 0.23%) 0          0             12,500 ( 0.21%)     6 ( 0.07%)   0            2,500 ( 1.05%)   162 ( 5.92%)   0                0              0          0          0                 c[i][j] = sum;
        .          .          .                  .              .            .                .              .            .                .              .          .          .               }
        .          .          .                  .              .            .                .              .            .                .              .          .          .             }
        4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         2 ( 0.00%)     0            0                0              0            0                0              0          0          0           }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .           /* jik */
        .          .          .                  .              .            .                .              .            .                .              .          .          .           void mul_jik(int n, int **a, int **b, int **c)
        7 ( 0.00%) 0          0                  0              0            0                5 ( 0.00%)     0            0                0              0          0          0           {
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int i, j, k;
      205 ( 0.00%) 0          0                152 ( 0.00%)     0            0                1 ( 0.00%)     0            0               51 ( 0.01%)     4 ( 0.03%) 0          0             for (j=0; j<n; j++) {
   10,250 ( 0.08%) 0          0              7,600 ( 0.13%)     0            0               50 ( 0.02%)     0            0            2,550 ( 0.52%)    55 ( 0.48%) 0          0               for (i=0; i<n; i++) {
    2,500 ( 0.02%) 0          0                  0              0            0            2,500 ( 1.05%)     0            0                0              0          0          0                 int sum = 0;
  512,500 ( 3.97%) 2 ( 0.14%) 2 ( 0.15%)   380,000 ( 6.27%)     0            0            2,500 ( 1.05%)     0            0          127,500 (25.96%) 2,525 (22.00%) 0          0                 for (k=0; k<n; k++)
3,000,000 (23.25%) 0          0          1,375,000 (22.70%) 4,258 (51.10%)   0                0              0            0                0              0          0          0           	sum += a[i][k] * b[k][j];
   30,000 ( 0.23%) 0          0             12,500 ( 0.21%)   229 ( 2.75%)   0            2,500 ( 1.05%) 1,483 (54.22%)   0                0              0          0          0                 c[i][j] = sum;
        .          .          .                  .              .            .                .              .            .                .              .          .          .               }
        .          .          .                  .              .            .                .              .            .                .              .          .          .             }
        4 ( 0.00%) 0          0                  2 ( 0.00%)     0            0                0              0            0                0              0          0          0           }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .           int main()
        8 ( 0.00%) 2 ( 0.14%) 2 ( 0.15%)         1 ( 0.00%)     0            0                3 ( 0.00%)     0            0                0              0          0          0           {
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int i, j, n;
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int **a;
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int **b;
        .          .          .                  .              .            .                .              .            .                .              .          .          .             int **c;
        1 ( 0.00%) 0          0                  0              0            0                1 ( 0.00%)     0            0                0              0          0          0             int Nmax = 100; // random numbers in [0, N]
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        3 ( 0.00%) 0          0                  0              0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Enter the dimension of matrices\n");
        8 ( 0.00%) 0          0                  0              0            0                1 ( 0.00%)     0            0                1 ( 0.00%)     1 ( 0.01%) 0          0             if(scanf("%d", &n) != 1) {
        .          .          .                  .              .            .                .              .            .                .              .          .          .               printf("Error in scanf.\n");
        .          .          .                  .              .            .                .              .            .                .              .          .          .               return -1;
        .          .          .                  .              .            .                .              .            .                .              .          .          .             }
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         1 ( 0.00%)     0            0                1 ( 0.00%)     0            0                0              0          0          0             allocate_mem(&a, n);
        .          .          .                  .              .            .                .              .            .                .              .          .          .            
      205 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       152 ( 0.00%)     0            0                1 ( 0.00%)     0            0               51 ( 0.01%)     5 ( 0.04%) 0          0             for ( i = 0 ; i < n ; i++ )
   10,250 ( 0.08%) 0          0              7,600 ( 0.13%)     0            0               50 ( 0.02%)     0            0            2,550 ( 0.52%)    58 ( 0.51%) 0          0               for ( j = 0 ; j < n ; j++ )
   35,000 ( 0.27%) 0          0             12,500 ( 0.21%)     0            0            5,000 ( 2.11%)   113 ( 4.13%) 112 (11.32%)       0              0          0          0                 a[i][j] = rand_int(Nmax);
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         1 ( 0.00%)     0            0                1 ( 0.00%)     0            0                0              0          0          0             allocate_mem(&b, n);
        .          .          .                  .              .            .                .              .            .                .              .          .          .            
      205 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       152 ( 0.00%)     0            0                1 ( 0.00%)     0            0               51 ( 0.01%)     6 ( 0.05%) 0          0             for ( i = 0 ; i < n ; i++ )
   10,250 ( 0.08%) 0          0              7,600 ( 0.13%)     0            0               50 ( 0.02%)     0            0            2,550 ( 0.52%)    58 ( 0.51%) 0          0               for ( j = 0 ; j < n ; j++ )
   35,000 ( 0.27%) 0          0             12,500 ( 0.21%)     1 ( 0.01%)   0            5,000 ( 2.11%)   114 ( 4.17%) 112 (11.32%)       0              0          0          0                 b[i][j] = rand_int(Nmax);
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        5 ( 0.00%) 0          0                  1 ( 0.00%)     0            0                1 ( 0.00%)     0            0                0              0          0          0             allocate_mem(&c, n);
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         4 ( 0.00%)     0            0                1 ( 0.00%)     0            0                0              0          0          0             mul_kij(n, a, b, c);
        3 ( 0.00%) 0          0                  0              0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Version kij is finished...\n");
        6 ( 0.00%) 0          0                  4 ( 0.00%)     1 ( 0.01%)   0                1 ( 0.00%)     0            0                0              0          0          0             mul_ijk(n, a, b, c);
        3 ( 0.00%) 0          0                  0              0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Version ijk is finished...\n");
        6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         4 ( 0.00%)     1 ( 0.01%)   0                1 ( 0.00%)     0            0                0              0          0          0             mul_jik(n, a, b, c);
        3 ( 0.00%) 0          0                  0              0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Version jik is finished...\n");
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        .          .          .                  .              .            .                .              .            .                .              .          .          .             /*
        .          .          .                  .              .            .                .              .            .                .              .          .          .               printf("Product of entered matrices:\n");
        .          .          .                  .              .            .                .              .            .                .              .          .          .            
        .          .          .                  .              .            .                .              .            .                .              .          .          .               for ( i = 0 ; i < n ; i++ )
        .          .          .                  .              .            .                .              .            .                .              .          .          .               {
        .          .          .                  .              .            .                .              .            .                .              .          .          .               for ( j = 0 ; j < n ; j++ )
        .          .          .                  .              .            .                .              .            .                .              .          .          .               printf("%d\t", c[i][j]);
        .          .          .                  .              .            .                .              .            .                .              .          .          .            
        .          .          .                  .              .            .                .              .            .                .              .          .          .               printf("\n");
        .          .          .                  .              .            .                .              .            .                .              .          .          .               }
        .          .          .                  .              .            .                .              .            .                .              .          .          .             */
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        5 ( 0.00%) 0          0                  2 ( 0.00%)     1 ( 0.01%)   0                1 ( 0.00%)     0            0                0              0          0          0             free_mem(a, n);
        5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         2 ( 0.00%)     0            0                1 ( 0.00%)     0            0                0              0          0          0             free_mem(b, n);
        5 ( 0.00%) 0          0                  2 ( 0.00%)     0            0                1 ( 0.00%)     0            0                0              0          0          0             free_mem(c, n);
        .          .          .                  .              .            .                .              .            .                .              .          .          .           
        1 ( 0.00%) 0          0                  0              0            0                0              0            0                0              0          0          0             return 0;
        6 ( 0.00%) 0          0                  5 ( 0.00%)     1 ( 0.01%)   0                0              0            0                1 ( 0.00%)     1 ( 0.01%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-tunables.c
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                 D1mr           DLmr         Dw               D1mw           DLmw         Bc               Bcm            Bi         Bim        
--------------------------------------------------------------------------------
12,399,218 (96.09%) 25 ( 1.78%) 24 ( 1.74%) 5,918,279 (97.71%) 6,341 (76.10%) 113 ( 7.82%) 185,774 (78.36%) 1,890 (69.10%) 242 (24.47%) 410,813 (83.63%) 7,901 (68.85%) 0          0           events annotated

