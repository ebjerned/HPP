--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1827892
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                 I1mr           ILmr           Dr               D1mr           DLmr           Dw              D1mw         DLmw         Bc              Bcm            Bi             Bim          
--------------------------------------------------------------------------------
1,849,924 (100.0%) 1,392 (100.0%) 1,368 (100.0%) 825,108 (100.0%) 1,866 (100.0%) 1,351 (100.0%) 55,740 (100.0%) 801 (100.0%) 717 (100.0%) 97,042 (100.0%) 5,460 (100.0%) 1,798 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir               I1mr        ILmr        Dr               D1mr         DLmr         Dw              D1mw         DLmw         Bc              Bcm          Bi             Bim          file:function
--------------------------------------------------------------------------------
638,366 (34.51%)  5 ( 0.36%)  5 ( 0.37%) 287,629 (34.86%)  22 ( 1.18%)  18 ( 1.33%) 16,906 (30.33%)   0            0          16,926 (17.44%) 684 (12.53%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
451,491 (24.41%)  4 ( 0.29%)  4 ( 0.29%) 225,129 (27.28%)   0            0           1,906 ( 3.42%)   0            0          16,926 (17.44%) 684 (12.53%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
451,491 (24.41%)  2 ( 0.14%)  2 ( 0.15%) 225,129 (27.28%)   0            0           1,906 ( 3.42%)   0            0          16,926 (17.44%) 684 (12.53%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
 39,840 ( 2.15%)  2 ( 0.14%)  2 ( 0.15%)  10,000 ( 1.21%)   4 ( 0.21%)   2 ( 0.15%)  3,750 ( 6.73%)   0            0           6,210 ( 6.40%)  84 ( 1.54%)     0           0           ./stdlib/./stdlib/random_r.c:random_r
 35,000 ( 1.89%)  2 ( 0.14%)  1 ( 0.07%)  12,500 ( 1.51%)   1 ( 0.05%)   1 ( 0.07%)  7,500 (13.46%)   0            0           3,750 ( 3.86%)   8 ( 0.15%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
 26,250 ( 1.42%)  3 ( 0.22%)  3 ( 0.22%)  10,000 ( 1.21%)   1 ( 0.05%)   1 ( 0.07%)  2,500 ( 4.49%)   0            0           5,000 ( 5.15%)   0              0           0           ./stdlib/./stdlib/random.c:random
 23,913 ( 1.29%) 18 ( 1.29%) 18 ( 1.32%)   8,029 ( 0.97%) 242 (12.97%) 156 (11.55%)  3,362 ( 6.03%)  11 ( 1.37%)   3 ( 0.42%)  3,641 ( 3.75%) 247 ( 4.52%)     0           0           ./elf/./elf/dl-lookup.c:do_lookup_x
 23,044 ( 1.25%)  9 ( 0.65%)  9 ( 0.66%)  10,281 ( 1.25%)   0            0           2,570 ( 4.61%)  36 ( 4.49%)  36 ( 5.02%)  1,354 ( 1.40%)  77 ( 1.41%)     0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main
 20,733 ( 1.12%) 11 ( 0.79%) 11 ( 0.80%)   4,385 ( 0.53%) 106 ( 5.68%)  89 ( 6.59%)  2,305 ( 4.14%)  12 ( 1.50%)   1 ( 0.14%)  2,479 ( 2.55%) 171 ( 3.13%)     0           0           ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x
 20,613 ( 1.11%)  6 ( 0.43%)  6 ( 0.44%)   3,785 ( 0.46%)  55 ( 2.95%)  55 ( 4.07%)     96 ( 0.17%)   2 ( 0.25%)   2 ( 0.28%)  5,800 ( 5.98%) 572 (10.48%)     0           0           ./elf/./elf/dl-tunables.c:__GI___tunables_init
 17,847 ( 0.96%) 21 ( 1.51%) 21 ( 1.54%)   4,477 ( 0.54%) 424 (22.72%) 394 (29.16%)  2,038 ( 3.66%) 250 (31.21%) 236 (32.91%)  2,464 ( 2.54%)  66 ( 1.21%)   151 ( 8.40%) 48 (27.12%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 11,406 ( 0.62%) 27 ( 1.94%) 26 ( 1.90%)   1,937 ( 0.23%)   0            0           1,943 ( 3.49%)  82 (10.24%)  81 (11.30%)  1,538 ( 1.58%)  58 ( 1.06%)     0           0           ./malloc/./malloc/malloc.c:_int_malloc
  9,947 ( 0.54%) 17 ( 1.22%) 17 ( 1.24%)   2,376 ( 0.29%) 263 (14.09%) 241 (17.84%)    369 ( 0.66%)   4 ( 0.50%)   0           1,787 ( 1.84%)  96 ( 1.76%)     0           0           ./elf/./elf/do-rel.h:_dl_relocate_object
  6,420 ( 0.35%)  8 ( 0.57%)  8 ( 0.58%)   1,832 ( 0.22%)   5 ( 0.27%)   0             790 ( 1.42%)   0            0           1,100 ( 1.13%)  11 ( 0.20%)     0           0           ./malloc/./malloc/malloc.c:_int_free
  6,250 ( 0.34%)  1 ( 0.07%)  1 ( 0.07%)   1,250 ( 0.15%)   0            0           1,250 ( 2.24%)   0            0               0            0              0           0           ./stdlib/./stdlib/rand.c:rand
  5,805 ( 0.31%) 31 ( 2.23%) 30 ( 2.19%)   1,193 ( 0.14%)  66 ( 3.54%)  42 ( 3.11%)      0            0            0             655 ( 0.67%) 156 ( 2.86%)    45 ( 2.50%) 28 (15.82%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
  5,008 ( 0.27%)  6 ( 0.43%)  6 ( 0.44%)   1,664 ( 0.20%)  50 ( 2.68%)  34 ( 2.52%)    568 ( 1.02%)   2 ( 0.25%)   1 ( 0.14%)    651 ( 0.67%)  42 ( 0.77%)     0           0           ./elf/./elf/dl-lookup.c:check_match
  3,528 ( 0.19%)  7 ( 0.50%)  7 ( 0.51%)     883 ( 0.11%)   1 ( 0.05%)   1 ( 0.07%)    321 ( 0.58%)   0            0             642 ( 0.66%)  24 ( 0.44%)     0           0           ./malloc/./malloc/malloc.c:malloc
  3,269 ( 0.18%) 10 ( 0.72%) 10 ( 0.73%)     499 ( 0.06%)   8 ( 0.43%)   8 ( 0.59%)     78 ( 0.14%)   0            0           1,133 ( 1.17%)  97 ( 1.78%)     0           0           ./elf/../sysdeps/x86/dl-cacheinfo.h:intel_check_word.constprop.0
  3,175 ( 0.17%)  1 ( 0.07%)  1 ( 0.07%)     624 ( 0.08%)   1 ( 0.05%)   1 ( 0.07%)      0            0            0             669 ( 0.69%) 108 ( 1.98%)     0           0           ./elf/./elf/dl-tunables.h:__GI___tunables_init
  3,026 ( 0.16%) 33 ( 2.37%) 29 ( 2.12%)   1,479 ( 0.18%)  14 ( 0.75%)   0              20 ( 0.04%)   1 ( 0.12%)   1 ( 0.14%)     12 ( 0.01%)   8 ( 0.15%) 1,450 (80.65%) 19 (10.73%)  ???:???
  2,472 ( 0.13%) 20 ( 1.44%) 20 ( 1.46%)     848 ( 0.10%)  37 ( 1.98%)  28 ( 2.07%)    252 ( 0.45%)  25 ( 3.12%)  21 ( 2.93%)    445 ( 0.46%)  80 ( 1.47%)     0           0           ./elf/./elf/dl-version.c:_dl_check_map_versions
  2,198 ( 0.12%)  1 ( 0.07%)  1 ( 0.07%)       0            0            0               0            0            0             345 ( 0.36%)  44 ( 0.81%)     0           0           ./elf/../bits/stdlib-bsearch.h:intel_check_word.constprop.0

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir               I1mr       ILmr       Dr               D1mr        DLmr        Dw              D1mw        DLmw        Bc              Bcm          Bi         Bim        

      .          .          .                .           .           .               .           .           .               .            .          .          .           #include <stdio.h>
      .          .          .                .           .           .               .           .           .               .            .          .          .           #include <stdlib.h>
      .          .          .                .           .           .               .           .           .               .            .          .          .            
      .          .          .                .           .           .               .           .           .               .            .          .          .           int rand_int(int N)
  6,250 ( 0.34%) 1 ( 0.07%) 0                0           0           0           2,500 ( 4.49%)  0           0               0            0          0          0           {
  1,250 ( 0.07%) 0          0                0           0           0           1,250 ( 2.24%)  0           0               0            0          0          0             int val = -1;
 10,000 ( 0.54%) 1 ( 0.07%) 1 ( 0.07%)   5,000 ( 0.61%)  0           0               0           0           0           3,750 ( 3.86%)   8 ( 0.15%) 0          0             while( val < 0 || val >= N )
      .          .          .                .           .           .               .           .           .               .            .          .          .               {
 13,750 ( 0.74%) 0          0            3,750 ( 0.45%)  1 ( 0.05%)  1 ( 0.07%)  3,750 ( 6.73%)  0           0               0            0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
      .          .          .                .           .           .               .           .           .               .            .          .          .               }
  1,250 ( 0.07%) 0          0            1,250 ( 0.15%)  0           0               0           0           0               0            0          0          0             return val;
  2,500 ( 0.14%) 0          0            2,500 ( 0.30%)  0           0               0           0           0               0            0          0          0           }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .           void allocate_mem(int*** arr, int n)
     21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       0           0           0              12 ( 0.02%)  0           0               0            0          0          0           {
      .          .          .                .           .           .               .           .           .               .            .          .          .             int i;
     24 ( 0.00%) 0          0                6 ( 0.00%)  0           0               6 ( 0.01%)  0           0               0            0          0          0             *arr = (int**)malloc(n*sizeof(int*));
    315 ( 0.02%) 1 ( 0.07%) 1 ( 0.07%)     231 ( 0.03%)  0           0               3 ( 0.01%)  0           0              78 ( 0.08%)   5 ( 0.09%) 0          0             for(i=0; i<n; i++)
    900 ( 0.05%) 0          0              300 ( 0.04%)  0           0             150 ( 0.27%)  9 ( 1.12%)  9 ( 1.26%)      0            0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
     15 ( 0.00%) 0          0                9 ( 0.00%)  0           0               0           0           0               0            0          0          0           }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .           void free_mem(int** arr, int n)
     18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       0           0           0               9 ( 0.02%)  0           0               0            0          0          0           {
      .          .          .                .           .           .               .           .           .               .            .          .          .             int i;
    315 ( 0.02%) 0          0              231 ( 0.03%)  0           0               3 ( 0.01%)  0           0              78 ( 0.08%)   6 ( 0.11%) 0          0             for(i=0; i<n; i++)
    600 ( 0.03%) 0          0              225 ( 0.03%)  0           0              75 ( 0.13%)  0           0               0            0          0          0               free(arr[i]);
      9 ( 0.00%) 0          0                3 ( 0.00%)  0           0               3 ( 0.01%)  0           0               0            0          0          0             free(arr);
      9 ( 0.00%) 0          0                6 ( 0.00%)  0           0               0           0           0               0            0          0          0           }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
      .          .          .                .           .           .               .           .           .               .            .          .          .           void mul_kij(int n, int **a, int **b, int **c)
      7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       0           0           0               5 ( 0.01%)  0           0               0            0          0          0           {
      .          .          .                .           .           .               .           .           .               .            .          .          .             int i, j, k;
    105 ( 0.01%) 1 ( 0.07%) 1 ( 0.07%)      77 ( 0.01%)  0           0               1 ( 0.00%)  0           0              26 ( 0.03%)   4 ( 0.07%) 0          0             for (k=0; k<n; k++) {
  2,625 ( 0.14%) 2 ( 0.14%) 2 ( 0.15%)   1,925 ( 0.23%)  0           0              25 ( 0.04%)  0           0             650 ( 0.67%)  30 ( 0.55%) 0          0               for (i=0; i<n; i++) {
  7,500 ( 0.41%) 0          0            3,125 ( 0.38%)  3 ( 0.16%)  0             625 ( 1.12%)  0           0               0            0          0          0                 int x = a[i][k];
 65,625 ( 3.55%) 0          0           48,125 ( 5.83%)  0           0             625 ( 1.12%)  0           0          16,250 (16.75%) 650 (11.90%) 0          0                 for (j=0; j<n; j++)
562,500 (30.41%) 1 ( 0.07%) 1 ( 0.07%) 234,375 (28.41%) 19 ( 1.02%) 18 ( 1.33%) 15,625 (28.03%)  0           0               0            0          0          0           	c[i][j] += x * b[k][j];   
      .          .          .                .           .           .               .           .           .               .            .          .          .               }
      .          .          .                .           .           .               .           .           .               .            .          .          .             }
      4 ( 0.00%) 0          0                2 ( 0.00%)  0           0               0           0           0               0            0          0          0           }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .           /* ijk */
      .          .          .                .           .           .               .           .           .               .            .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
      7 ( 0.00%) 0          0                0           0           0               5 ( 0.01%)  0           0               0            0          0          0           {
      .          .          .                .           .           .               .           .           .               .            .          .          .             int i, j, k;
    105 ( 0.01%) 1 ( 0.07%) 1 ( 0.07%)      77 ( 0.01%)  0           0               1 ( 0.00%)  0           0              26 ( 0.03%)   4 ( 0.07%) 0          0             for (i=0; i<n; i++)  {
  2,625 ( 0.14%) 1 ( 0.07%) 1 ( 0.07%)   1,925 ( 0.23%)  0           0              25 ( 0.04%)  0           0             650 ( 0.67%)  30 ( 0.55%) 0          0               for (j=0; j<n; j++) {
    625 ( 0.03%) 0          0                0           0           0             625 ( 1.12%)  0           0               0            0          0          0                 int sum = 0;
 65,625 ( 3.55%) 1 ( 0.07%) 1 ( 0.07%)  48,125 ( 5.83%)  0           0             625 ( 1.12%)  0           0          16,250 (16.75%) 650 (11.90%) 0          0                 for (k=0; k<n; k++) 
375,000 (20.27%) 0          0          171,875 (20.83%)  0           0               0           0           0               0            0          0          0           	sum += a[i][k] * b[k][j];
  7,500 ( 0.41%) 0          0            3,125 ( 0.38%)  0           0             625 ( 1.12%)  0           0               0            0          0          0                 c[i][j] = sum;
      .          .          .                .           .           .               .           .           .               .            .          .          .               }
      .          .          .                .           .           .               .           .           .               .            .          .          .             }
      4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       2 ( 0.00%)  0           0               0           0           0               0            0          0          0           }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .           /* jik */
      .          .          .                .           .           .               .           .           .               .            .          .          .           void mul_jik(int n, int **a, int **b, int **c)
      7 ( 0.00%) 0          0                0           0           0               5 ( 0.01%)  0           0               0            0          0          0           {
      .          .          .                .           .           .               .           .           .               .            .          .          .             int i, j, k;
    105 ( 0.01%) 0          0               77 ( 0.01%)  0           0               1 ( 0.00%)  0           0              26 ( 0.03%)   4 ( 0.07%) 0          0             for (j=0; j<n; j++) {
  2,625 ( 0.14%) 0          0            1,925 ( 0.23%)  0           0              25 ( 0.04%)  0           0             650 ( 0.67%)  30 ( 0.55%) 0          0               for (i=0; i<n; i++) {
    625 ( 0.03%) 0          0                0           0           0             625 ( 1.12%)  0           0               0            0          0          0                 int sum = 0;
 65,625 ( 3.55%) 2 ( 0.14%) 2 ( 0.15%)  48,125 ( 5.83%)  0           0             625 ( 1.12%)  0           0          16,250 (16.75%) 650 (11.90%) 0          0                 for (k=0; k<n; k++)
375,000 (20.27%) 0          0          171,875 (20.83%)  0           0               0           0           0               0            0          0          0           	sum += a[i][k] * b[k][j];
  7,500 ( 0.41%) 0          0            3,125 ( 0.38%)  0           0             625 ( 1.12%)  0           0               0            0          0          0                 c[i][j] = sum;
      .          .          .                .           .           .               .           .           .               .            .          .          .               }
      .          .          .                .           .           .               .           .           .               .            .          .          .             }
      4 ( 0.00%) 0          0                2 ( 0.00%)  0           0               0           0           0               0            0          0          0           }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .           int main()
      8 ( 0.00%) 2 ( 0.14%) 2 ( 0.15%)       1 ( 0.00%)  0           0               3 ( 0.01%)  0           0               0            0          0          0           {
      .          .          .                .           .           .               .           .           .               .            .          .          .             int i, j, n;
      .          .          .                .           .           .               .           .           .               .            .          .          .             int **a;
      .          .          .                .           .           .               .           .           .               .            .          .          .             int **b;
      .          .          .                .           .           .               .           .           .               .            .          .          .             int **c;
      1 ( 0.00%) 0          0                0           0           0               1 ( 0.00%)  0           0               0            0          0          0             int Nmax = 100; // random numbers in [0, N]
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      3 ( 0.00%) 0          0                0           0           0               1 ( 0.00%)  0           0               0            0          0          0             printf("Enter the dimension of matrices\n");
      8 ( 0.00%) 0          0                0           0           0               1 ( 0.00%)  0           0               1 ( 0.00%)   1 ( 0.02%) 0          0             if(scanf("%d", &n) != 1) {
      .          .          .                .           .           .               .           .           .               .            .          .          .               printf("Error in scanf.\n");
      .          .          .                .           .           .               .           .           .               .            .          .          .               return -1;
      .          .          .                .           .           .               .           .           .               .            .          .          .             }
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       1 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             allocate_mem(&a, n);
      .          .          .                .           .           .               .           .           .               .            .          .          .            
    105 ( 0.01%) 1 ( 0.07%) 1 ( 0.07%)      77 ( 0.01%)  0           0               1 ( 0.00%)  0           0              26 ( 0.03%)   4 ( 0.07%) 0          0             for ( i = 0 ; i < n ; i++ )
  2,625 ( 0.14%) 0          0            1,925 ( 0.23%)  0           0              25 ( 0.04%)  0           0             650 ( 0.67%)  33 ( 0.60%) 0          0               for ( j = 0 ; j < n ; j++ )
  8,750 ( 0.47%) 0          0            3,125 ( 0.38%)  0           0           1,250 ( 2.24%) 18 ( 2.25%) 18 ( 2.51%)      0            0          0          0                 a[i][j] = rand_int(Nmax);
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       1 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             allocate_mem(&b, n);
      .          .          .                .           .           .               .           .           .               .            .          .          .            
    105 ( 0.01%) 1 ( 0.07%) 1 ( 0.07%)      77 ( 0.01%)  0           0               1 ( 0.00%)  0           0              26 ( 0.03%)   5 ( 0.09%) 0          0             for ( i = 0 ; i < n ; i++ )
  2,625 ( 0.14%) 0          0            1,925 ( 0.23%)  0           0              25 ( 0.04%)  0           0             650 ( 0.67%)  33 ( 0.60%) 0          0               for ( j = 0 ; j < n ; j++ )
  8,750 ( 0.47%) 0          0            3,125 ( 0.38%)  0           0           1,250 ( 2.24%) 18 ( 2.25%) 18 ( 2.51%)      0            0          0          0                 b[i][j] = rand_int(Nmax);
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      5 ( 0.00%) 0          0                1 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             allocate_mem(&c, n);
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       4 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             mul_kij(n, a, b, c);
      3 ( 0.00%) 0          0                0           0           0               1 ( 0.00%)  0           0               0            0          0          0             printf("Version kij is finished...\n");
      6 ( 0.00%) 0          0                4 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             mul_ijk(n, a, b, c);
      3 ( 0.00%) 0          0                0           0           0               1 ( 0.00%)  0           0               0            0          0          0             printf("Version ijk is finished...\n");
      6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       4 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             mul_jik(n, a, b, c);
      3 ( 0.00%) 0          0                0           0           0               1 ( 0.00%)  0           0               0            0          0          0             printf("Version jik is finished...\n");
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      .          .          .                .           .           .               .           .           .               .            .          .          .             /*
      .          .          .                .           .           .               .           .           .               .            .          .          .               printf("Product of entered matrices:\n");
      .          .          .                .           .           .               .           .           .               .            .          .          .            
      .          .          .                .           .           .               .           .           .               .            .          .          .               for ( i = 0 ; i < n ; i++ )
      .          .          .                .           .           .               .           .           .               .            .          .          .               {
      .          .          .                .           .           .               .           .           .               .            .          .          .               for ( j = 0 ; j < n ; j++ )
      .          .          .                .           .           .               .           .           .               .            .          .          .               printf("%d\t", c[i][j]);
      .          .          .                .           .           .               .           .           .               .            .          .          .            
      .          .          .                .           .           .               .           .           .               .            .          .          .               printf("\n");
      .          .          .                .           .           .               .           .           .               .            .          .          .               }
      .          .          .                .           .           .               .           .           .               .            .          .          .             */
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      5 ( 0.00%) 0          0                2 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             free_mem(a, n);
      5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       2 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             free_mem(b, n);
      5 ( 0.00%) 0          0                2 ( 0.00%)  0           0               1 ( 0.00%)  0           0               0            0          0          0             free_mem(c, n);
      .          .          .                .           .           .               .           .           .               .            .          .          .           
      1 ( 0.00%) 0          0                0           0           0               0           0           0               0            0          0          0             return 0;
      6 ( 0.00%) 0          0                5 ( 0.00%)  0           0               0           0           0               1 ( 0.00%)   1 ( 0.02%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../bits/stdlib-bsearch.h
  ./elf/../sysdeps/x86/dl-cacheinfo.h
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-tunables.c
  ./elf/./elf/dl-tunables.h
  ./elf/./elf/dl-version.c
  ./elf/./elf/do-rel.h
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                 I1mr        ILmr        Dr               D1mr        DLmr        Dw              D1mw        DLmw        Bc              Bcm            Bi         Bim        
--------------------------------------------------------------------------------
1,601,618 (86.58%) 25 ( 1.80%) 24 ( 1.75%) 761,679 (92.31%) 23 ( 1.23%) 19 ( 1.41%) 31,049 (55.70%) 45 ( 5.62%) 45 ( 6.28%) 56,038 (57.75%) 2,148 (39.34%) 0          0           events annotated

