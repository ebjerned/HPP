--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         16384 B, 64 B, 4-way associative
LL cache:         12582912 B, 64 B, 192-way associative
Command:          ./matmul
Data file:        cachegrind.out.1827911
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  I1mr           ILmr           Dr                  D1mr            DLmr           Dw               D1mw           DLmw           Bc                 Bcm             Bi              Bim          
--------------------------------------------------------------------------------
42,298,768 (100.0%) 1,402 (100.0%) 1,378 (100.0%) 20,040,466 (100.0%) 97,215 (100.0%) 1,633 (100.0%) 650,494 (100.0%) 7,775 (100.0%) 1,448 (100.0%) 1,486,777 (100.0%) 21,390 (100.0%) 12,098 (100.0%) 177 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                 D1mr            DLmr         Dw               D1mw           DLmw         Bc               Bcm            Bi              Bim          file:function
--------------------------------------------------------------------------------
16,993,816 (40.18%)  5 ( 0.36%)  5 ( 0.36%) 7,650,379 (38.17%) 35,590 (36.61%) 300 (18.37%) 433,206 (66.60%)     0            0          433,276 (29.14%) 5,734 (26.81%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_kij
11,936,941 (28.22%)  4 ( 0.29%)  4 ( 0.29%) 5,962,879 (29.75%) 29,022 (29.85%)   0           16,956 ( 2.61%)   549 ( 7.06%)   0          433,276 (29.14%) 5,734 (26.81%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_ijk
11,936,941 (28.22%)  2 ( 0.14%)  2 ( 0.15%) 5,962,879 (29.75%) 30,421 (31.29%)   0           16,956 ( 2.61%) 5,617 (72.24%)   0          433,276 (29.14%) 5,734 (26.81%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:mul_jik
   358,548 ( 0.85%)  2 ( 0.14%)  2 ( 0.15%)    90,000 ( 0.45%)      4 ( 0.00%)   2 ( 0.12%)  33,750 ( 5.19%)     0            0           55,887 ( 3.76%)   729 ( 3.41%)      0           0           ./stdlib/./stdlib/random_r.c:random_r
   315,000 ( 0.74%)  2 ( 0.14%)  1 ( 0.07%)   112,500 ( 0.56%)      1 ( 0.00%)   1 ( 0.06%)  67,500 (10.38%)     0            0           33,750 ( 2.27%)     8 ( 0.04%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:rand_int
   236,250 ( 0.56%)  3 ( 0.21%)  3 ( 0.22%)    90,000 ( 0.45%)      1 ( 0.00%)   1 ( 0.06%)  22,500 ( 3.46%)     0            0           45,000 ( 3.03%)     0               0           0           ./stdlib/./stdlib/random.c:random
   203,944 ( 0.48%)  9 ( 0.64%)  9 ( 0.65%)    90,781 ( 0.45%)     10 ( 0.01%)   0           22,670 ( 3.49%)   658 ( 8.46%) 600 (41.44%)  11,554 ( 0.78%)   180 ( 0.84%)      0           0           /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c:main
    56,250 ( 0.13%)  1 ( 0.07%)  1 ( 0.07%)    11,250 ( 0.06%)      0            0           11,250 ( 1.73%)     0            0                0              0               0           0           ./stdlib/./stdlib/rand.c:rand

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/erbj0497/Documents/HPP/L4/Task-5/matmul.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr            DLmr         Dw               D1mw           DLmw         Bc               Bcm            Bi         Bim        

         .          .          .                  .               .            .                .              .            .                .              .          .          .           #include <stdio.h>
         .          .          .                  .               .            .                .              .            .                .              .          .          .           #include <stdlib.h>
         .          .          .                  .               .            .                .              .            .                .              .          .          .            
         .          .          .                  .               .            .                .              .            .                .              .          .          .           int rand_int(int N)
    56,250 ( 0.13%) 1 ( 0.07%) 0                  0               0            0           22,500 ( 3.46%)     0            0                0              0          0          0           {
    11,250 ( 0.03%) 0          0                  0               0            0           11,250 ( 1.73%)     0            0                0              0          0          0             int val = -1;
    90,000 ( 0.21%) 1 ( 0.07%) 1 ( 0.07%)    45,000 ( 0.22%)      0            0                0              0            0           33,750 ( 2.27%)     8 ( 0.04%) 0          0             while( val < 0 || val >= N )
         .          .          .                  .               .            .                .              .            .                .              .          .          .               {
   123,750 ( 0.29%) 0          0             33,750 ( 0.17%)      1 ( 0.00%)   1 ( 0.06%)  33,750 ( 5.19%)     0            0                0              0          0          0                 val = (int)(N * (double)rand()/RAND_MAX);
         .          .          .                  .               .            .                .              .            .                .              .          .          .               }
    11,250 ( 0.03%) 0          0             11,250 ( 0.06%)      0            0                0              0            0                0              0          0          0             return val;
    22,500 ( 0.05%) 0          0             22,500 ( 0.11%)      0            0                0              0            0                0              0          0          0           }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .           void allocate_mem(int*** arr, int n)
        21 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0               0            0               12 ( 0.00%)     0            0                0              0          0          0           {
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int i;
        24 ( 0.00%) 0          0                  6 ( 0.00%)      0            0                6 ( 0.00%)     0            0                0              0          0          0             *arr = (int**)malloc(n*sizeof(int*));
       915 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       681 ( 0.00%)      0            0                3 ( 0.00%)     0            0              228 ( 0.02%)     7 ( 0.03%) 0          0             for(i=0; i<n; i++)
     2,700 ( 0.01%) 0          0                900 ( 0.00%)      0            0              450 ( 0.07%)    26 ( 0.33%)  26 ( 1.80%)       0              0          0          0               (*arr)[i] = (int*)malloc(n*sizeof(int));
        15 ( 0.00%) 0          0                  9 ( 0.00%)      0            0                0              0            0                0              0          0          0           }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .           void free_mem(int** arr, int n)
        18 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0               0            0                9 ( 0.00%)     0            0                0              0          0          0           {
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int i;
       915 ( 0.00%) 0          0                681 ( 0.00%)      0            0                3 ( 0.00%)     0            0              228 ( 0.02%)     7 ( 0.03%) 0          0             for(i=0; i<n; i++)
     1,800 ( 0.00%) 0          0                675 ( 0.00%)     22 ( 0.02%)   0              225 ( 0.03%)     0            0                0              0          0          0               free(arr[i]);
         9 ( 0.00%) 0          0                  3 ( 0.00%)      0            0                3 ( 0.00%)     0            0                0              0          0          0             free(arr);
         9 ( 0.00%) 0          0                  6 ( 0.00%)      0            0                0              0            0                0              0          0          0           }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .           /* kij */ //Most efficent in L1 cache, since this multiplication only need to fetch the value of b at each iteration of the most inner loop. The assignement of x is move up a loop which reduces the amount of changes in cachememory.
         .          .          .                  .               .            .                .              .            .                .              .          .          .           void mul_kij(int n, int **a, int **b, int **c)
         7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0               0            0                5 ( 0.00%)     0            0                0              0          0          0           {
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int i, j, k;
       305 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       227 ( 0.00%)      0            0                1 ( 0.00%)     0            0               76 ( 0.01%)     4 ( 0.02%) 0          0             for (k=0; k<n; k++) {
    22,875 ( 0.05%) 2 ( 0.14%) 2 ( 0.15%)    17,025 ( 0.08%)      0            0               75 ( 0.01%)     0            0            5,700 ( 0.38%)    80 ( 0.37%) 0          0               for (i=0; i<n; i++) {
    67,500 ( 0.16%) 0          0             28,125 ( 0.14%)  6,371 ( 6.55%)   0            5,625 ( 0.86%)     0            0                0              0          0          0                 int x = a[i][k];
 1,715,625 ( 4.06%) 0          0          1,276,875 ( 6.37%)      0            0            5,625 ( 0.86%)     0            0          427,500 (28.75%) 5,650 (26.41%) 0          0                 for (j=0; j<n; j++)
15,187,500 (35.91%) 1 ( 0.07%) 1 ( 0.07%) 6,328,125 (31.58%) 29,219 (30.06%) 300 (18.37%) 421,875 (64.85%)     0            0                0              0          0          0           	c[i][j] += x * b[k][j];   
         .          .          .                  .               .            .                .              .            .                .              .          .          .               }
         .          .          .                  .               .            .                .              .            .                .              .          .          .             }
         4 ( 0.00%) 0          0                  2 ( 0.00%)      0            0                0              0            0                0              0          0          0           }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .           /* ijk */
         .          .          .                  .               .            .                .              .            .                .              .          .          .           void mul_ijk(int n, int **a, int **b, int **c)
         7 ( 0.00%) 0          0                  0               0            0                5 ( 0.00%)     0            0                0              0          0          0           {
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int i, j, k;
       305 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       227 ( 0.00%)      0            0                1 ( 0.00%)     0            0               76 ( 0.01%)     4 ( 0.02%) 0          0             for (i=0; i<n; i++)  {
    22,875 ( 0.05%) 1 ( 0.07%) 1 ( 0.07%)    17,025 ( 0.08%)      0            0               75 ( 0.01%)     0            0            5,700 ( 0.38%)    80 ( 0.37%) 0          0               for (j=0; j<n; j++) {
     5,625 ( 0.01%) 0          0                  0               0            0            5,625 ( 0.86%)     0            0                0              0          0          0                 int sum = 0;
 1,715,625 ( 4.06%) 1 ( 0.07%) 1 ( 0.07%) 1,276,875 ( 6.37%)      0            0            5,625 ( 0.86%)     0            0          427,500 (28.75%) 5,650 (26.41%) 0          0                 for (k=0; k<n; k++) 
10,125,000 (23.94%) 0          0          4,640,625 (23.16%) 28,932 (29.76%)   0                0              0            0                0              0          0          0           	sum += a[i][k] * b[k][j];
    67,500 ( 0.16%) 0          0             28,125 ( 0.14%)     90 ( 0.09%)   0            5,625 ( 0.86%)   549 ( 7.06%)   0                0              0          0          0                 c[i][j] = sum;
         .          .          .                  .               .            .                .              .            .                .              .          .          .               }
         .          .          .                  .               .            .                .              .            .                .              .          .          .             }
         4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         2 ( 0.00%)      0            0                0              0            0                0              0          0          0           }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .           /* jik */
         .          .          .                  .               .            .                .              .            .                .              .          .          .           void mul_jik(int n, int **a, int **b, int **c)
         7 ( 0.00%) 0          0                  0               0            0                5 ( 0.00%)     0            0                0              0          0          0           {
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int i, j, k;
       305 ( 0.00%) 0          0                227 ( 0.00%)      0            0                1 ( 0.00%)     0            0               76 ( 0.01%)     4 ( 0.02%) 0          0             for (j=0; j<n; j++) {
    22,875 ( 0.05%) 0          0             17,025 ( 0.08%)      0            0               75 ( 0.01%)     0            0            5,700 ( 0.38%)    80 ( 0.37%) 0          0               for (i=0; i<n; i++) {
     5,625 ( 0.01%) 0          0                  0               0            0            5,625 ( 0.86%)     0            0                0              0          0          0                 int sum = 0;
 1,715,625 ( 4.06%) 2 ( 0.14%) 2 ( 0.15%) 1,276,875 ( 6.37%)      0            0            5,625 ( 0.86%)     0            0          427,500 (28.75%) 5,650 (26.41%) 0          0                 for (k=0; k<n; k++)
10,125,000 (23.94%) 0          0          4,640,625 (23.16%) 29,671 (30.52%)   0                0              0            0                0              0          0          0           	sum += a[i][k] * b[k][j];
    67,500 ( 0.16%) 0          0             28,125 ( 0.14%)    750 ( 0.77%)   0            5,625 ( 0.86%) 5,617 (72.24%)   0                0              0          0          0                 c[i][j] = sum;
         .          .          .                  .               .            .                .              .            .                .              .          .          .               }
         .          .          .                  .               .            .                .              .            .                .              .          .          .             }
         4 ( 0.00%) 0          0                  2 ( 0.00%)      0            0                0              0            0                0              0          0          0           }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .           int main()
         8 ( 0.00%) 2 ( 0.14%) 2 ( 0.15%)         1 ( 0.00%)      0            0                3 ( 0.00%)     0            0                0              0          0          0           {
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int i, j, n;
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int **a;
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int **b;
         .          .          .                  .               .            .                .              .            .                .              .          .          .             int **c;
         1 ( 0.00%) 0          0                  0               0            0                1 ( 0.00%)     0            0                0              0          0          0             int Nmax = 100; // random numbers in [0, N]
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         3 ( 0.00%) 0          0                  0               0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Enter the dimension of matrices\n");
         8 ( 0.00%) 0          0                  0               0            0                1 ( 0.00%)     0            0                1 ( 0.00%)     1 ( 0.00%) 0          0             if(scanf("%d", &n) != 1) {
         .          .          .                  .               .            .                .              .            .                .              .          .          .               printf("Error in scanf.\n");
         .          .          .                  .               .            .                .              .            .                .              .          .          .               return -1;
         .          .          .                  .               .            .                .              .            .                .              .          .          .             }
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         1 ( 0.00%)      0            0                1 ( 0.00%)     0            0                0              0          0          0             allocate_mem(&a, n);
         .          .          .                  .               .            .                .              .            .                .              .          .          .            
       305 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       227 ( 0.00%)      0            0                1 ( 0.00%)     0            0               76 ( 0.01%)     6 ( 0.03%) 0          0             for ( i = 0 ; i < n ; i++ )
    22,875 ( 0.05%) 0          0             17,025 ( 0.08%)      0            0               75 ( 0.01%)     0            0            5,700 ( 0.38%)    83 ( 0.39%) 0          0               for ( j = 0 ; j < n ; j++ )
    78,750 ( 0.19%) 0          0             28,125 ( 0.14%)      3 ( 0.00%)   0           11,250 ( 1.73%)   329 ( 4.23%) 300 (20.72%)       0              0          0          0                 a[i][j] = rand_int(Nmax);
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         1 ( 0.00%)      0            0                1 ( 0.00%)     0            0                0              0          0          0             allocate_mem(&b, n);
         .          .          .                  .               .            .                .              .            .                .              .          .          .            
       305 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)       227 ( 0.00%)      0            0                1 ( 0.00%)     0            0               76 ( 0.01%)     6 ( 0.03%) 0          0             for ( i = 0 ; i < n ; i++ )
    22,875 ( 0.05%) 0          0             17,025 ( 0.08%)      0            0               75 ( 0.01%)     0            0            5,700 ( 0.38%)    83 ( 0.39%) 0          0               for ( j = 0 ; j < n ; j++ )
    78,750 ( 0.19%) 0          0             28,125 ( 0.14%)      3 ( 0.00%)   0           11,250 ( 1.73%)   329 ( 4.23%) 300 (20.72%)       0              0          0          0                 b[i][j] = rand_int(Nmax);
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         5 ( 0.00%) 0          0                  1 ( 0.00%)      0            0                1 ( 0.00%)     0            0                0              0          0          0             allocate_mem(&c, n);
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         4 ( 0.00%)      0            0                1 ( 0.00%)     0            0                0              0          0          0             mul_kij(n, a, b, c);
         3 ( 0.00%) 0          0                  0               0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Version kij is finished...\n");
         6 ( 0.00%) 0          0                  4 ( 0.00%)      1 ( 0.00%)   0                1 ( 0.00%)     0            0                0              0          0          0             mul_ijk(n, a, b, c);
         3 ( 0.00%) 0          0                  0               0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Version ijk is finished...\n");
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         4 ( 0.00%)      1 ( 0.00%)   0                1 ( 0.00%)     0            0                0              0          0          0             mul_jik(n, a, b, c);
         3 ( 0.00%) 0          0                  0               0            0                1 ( 0.00%)     0            0                0              0          0          0             printf("Version jik is finished...\n");
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         .          .          .                  .               .            .                .              .            .                .              .          .          .             /*
         .          .          .                  .               .            .                .              .            .                .              .          .          .               printf("Product of entered matrices:\n");
         .          .          .                  .               .            .                .              .            .                .              .          .          .            
         .          .          .                  .               .            .                .              .            .                .              .          .          .               for ( i = 0 ; i < n ; i++ )
         .          .          .                  .               .            .                .              .            .                .              .          .          .               {
         .          .          .                  .               .            .                .              .            .                .              .          .          .               for ( j = 0 ; j < n ; j++ )
         .          .          .                  .               .            .                .              .            .                .              .          .          .               printf("%d\t", c[i][j]);
         .          .          .                  .               .            .                .              .            .                .              .          .          .            
         .          .          .                  .               .            .                .              .            .                .              .          .          .               printf("\n");
         .          .          .                  .               .            .                .              .            .                .              .          .          .               }
         .          .          .                  .               .            .                .              .            .                .              .          .          .             */
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         5 ( 0.00%) 0          0                  2 ( 0.00%)      1 ( 0.00%)   0                1 ( 0.00%)     0            0                0              0          0          0             free_mem(a, n);
         5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         2 ( 0.00%)      0            0                1 ( 0.00%)     0            0                0              0          0          0             free_mem(b, n);
         5 ( 0.00%) 0          0                  2 ( 0.00%)      0            0                1 ( 0.00%)     0            0                0              0          0          0             free_mem(c, n);
         .          .          .                  .               .            .                .              .            .                .              .          .          .           
         1 ( 0.00%) 0          0                  0               0            0                0              0            0                0              0          0          0             return 0;
         6 ( 0.00%) 0          0                  5 ( 0.00%)      1 ( 0.00%)   0                0              0            0                1 ( 0.00%)     1 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                  D1mr            DLmr         Dw               D1mw           DLmw         Bc                 Bcm             Bi         Bim        
--------------------------------------------------------------------------------
41,393,068 (97.86%) 25 ( 1.78%) 24 ( 1.74%) 19,782,379 (98.71%) 95,066 (97.79%) 301 (18.43%) 557,999 (85.78%) 6,850 (88.10%) 626 (43.23%) 1,345,588 (90.50%) 17,404 (81.37%) 0          0           events annotated

